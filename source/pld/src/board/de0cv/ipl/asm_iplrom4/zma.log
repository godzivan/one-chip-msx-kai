Z80 Macro Assembler ZMA v1.0.15
=====================================================
Programmed by t.hara

<< code >>
[	ORG 0X0000]
	code address: 0x000000

[ENTRY_POINT :]
	label address: 0x000000

[	DI] Z80:5cyc, R800:2cyc
000000: f3

[	LD SP , 0XFFFF] Z80:11cyc, R800:3cyc
000001: 31 ff ff

[	LD BC , END_OF_CODE - START_OF_CODE] Z80:11cyc, R800:3cyc
000004: 01 b8 08

[	LD DE , DRAM_CODE_ADDRESS] Z80:11cyc, R800:3cyc
000007: 11 00 f0

[	LD HL , ROM_CODE_ADDRESS] Z80:11cyc, R800:3cyc
00000a: 21 12 00

[	LDIR] Z80:23cyc(BC!=0), 18cyc(BC=0), R800:?cyc(BC!=0), 7cyc(BC=0)
00000d: ed b0

[	JP START_OF_CODE] Z80:11cyc, R800:5cyc
00000f: c3 00 f0

[ROM_CODE_ADDRESS ::]
	global label address: 0x000012

[	ORG DRAM_CODE_ADDRESS]
	code address: 0x00f000

[START_OF_CODE ::]
	global label address: 0x00f000

[	XOR A , A] Z80:5cyc, R800:1cyc
00f000: af

[	LD [ CARD_TYPE ] , A] Z80:14cyc, R800:6cyc
00f001: 32 cf ff

[	CALL SD_PREINITIALIZE] Z80:18cyc, R800:5cyc
00f004: cd 64 f3

[	LD A , EXP_IO_OCMKAI_CTRL_ID] Z80:8cyc, R800:2cyc
00f007: 3e d5

[	OUT [ EXP_IO_VENDOR_ID_PORT ] , A] Z80:12cyc, R800:10 or 9cyc
00f009: d3 40

[	LD A , EXP_IO_OCMKAI_CTRL_REG_MEMORY_ID] Z80:8cyc, R800:2cyc
00f00b: 3e 02

[	OUT [ EXP_IO_OCMKAI_CTRL_REGISTER_SEL ] , A] Z80:12cyc, R800:10 or 9cyc
00f00d: d3 41

[	XOR A , A] Z80:5cyc, R800:1cyc
00f00f: af

[	OUT [ EXP_IO_OCMKAI_CTRL_DATA ] , A] Z80:12cyc, R800:10 or 9cyc
00f010: d3 42

[	LD A , 0XF7] Z80:8cyc, R800:2cyc
00f012: 3e f7

[	OUT [ 0XAA ] , A] Z80:12cyc, R800:10 or 9cyc
00f014: d3 aa

[	IN A , [ 0XA9 ]] Z80:12cyc, R800:10 or 9cyc
00f016: db a9

[	AND A , 4] Z80:8cyc, R800:2cyc
00f018: e6 04

[	JR Z , SKIP_CHECK] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f01a: 28 1e

[	LD A , [ BIOS_UPDATING ]] Z80:14cyc, R800:6cyc
00f01c: 3a c4 f8

[	CP A , 0XD4] Z80:8cyc, R800:2cyc
00f01f: fe d4

[	JR Z , FORCE_BIOS_LOAD_FROM_EPBIOS] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f021: 28 23

[	XOR A , A] Z80:5cyc, R800:1cyc
00f023: af

[	OUT [ EXP_IO_OCMKAI_CTRL_DATA ] , A] Z80:12cyc, R800:10 or 9cyc
00f024: d3 42

[	LD A , MAIN_ROM1_BANK & 0XFF] Z80:8cyc, R800:2cyc
00f026: 3e 80

[	LD [ ESERAM8K_BANK2 ] , A] Z80:14cyc, R800:6cyc
00f028: 32 00 70

[	LD HL , 0X8000] Z80:11cyc, R800:3cyc
00f02b: 21 00 80

[	LD A , [ HL ]] Z80:8cyc, R800:4cyc
00f02e: 7e

[	CP A , 0XF3] Z80:8cyc, R800:2cyc
00f02f: fe f3

[	JR NZ , NO_LOADED] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f031: 20 07

[	INC HL] Z80:7cyc, R800:1cyc
00f033: 23

[	LD A , [ HL ]] Z80:8cyc, R800:4cyc
00f034: 7e

[	CP A , 0XC3] Z80:8cyc, R800:2cyc
00f035: fe c3

[	JP Z , START_SYSTEM] Z80:11cyc, R800:5cyc(cond=true), 3cyc(cond=false)
00f037: ca d3 f1

[NO_LOADED :]
	label address: 0x00f03a

[SKIP_CHECK :]
	label address: 0x00f03a

[	CALL VDP_INITIALIZE] Z80:18cyc, R800:5cyc
00f03a: cd 16 f5

[	LD HL , 0X0000] Z80:11cyc, R800:3cyc
00f03d: 21 00 00

[	CALL VDP_SET_VRAM_ADDRESS] Z80:18cyc, R800:5cyc
00f040: cd 43 f5

[FORCE_BIOS_LOAD_FROM_SDCARD ::]
	global label address: 0x00f043

[	CALL LOAD_FROM_SDCARD] Z80:18cyc, R800:5cyc
00f043: cd 44 f2

[FORCE_BIOS_LOAD_FROM_EPBIOS ::]
	global label address: 0x00f046

[	CALL LOAD_FROM_EPCS] Z80:18cyc, R800:5cyc
00f046: cd 73 f0

[BIOS_READ_ERROR ::]
	global label address: 0x00f049

[	LD HL , 0 + 6 * 40] Z80:11cyc, R800:3cyc
00f049: 21 f0 00

[	CALL VDP_SET_VRAM_ADDRESS] Z80:18cyc, R800:5cyc
00f04c: cd 43 f5

[	XOR A , A] Z80:5cyc, R800:1cyc
00f04f: af

[	LD [ PUTC ] , A] Z80:14cyc, R800:6cyc
00f050: 32 45 f4

[	LD HL , MESSAGE_BIOS_READ_ERROR] Z80:11cyc, R800:3cyc
00f053: 21 f5 f4

[	CALL PUTS] Z80:18cyc, R800:5cyc
00f056: cd 49 f4

[	HALT] Z80:5cyc, R800:2cyc and wait interrupt
00f059: 76

[MSG_ENTER ::]
	global label address: 0x00f05a

[	DS "[Enter]"]
00f05a: 5b 45 6e 74 65 72 5d

[	DB 0]
00f061: 00

[MSG_SD_PREINIT ::]
	global label address: 0x00f062

[	DS "[SdPre]"]
00f062: 5b 53 64 50 72 65 5d

[	DB 0]
00f069: 00

[MSG_END_OF_INIT ::]
	global label address: 0x00f06a

[	DS "[EOINIT]"]
00f06a: 5b 45 4f 49 4e 49 54 5d

[	DB 0]
00f072: 00

[	INCLUDE ".//ocm_iplrom_load_epcs.asm"] begin
[	SCOPE LOAD_FROM_EPCS]
	Scope path: LOAD_FROM_EPCS:

[LOAD_FROM_EPCS ::]
	global label address: 0x00f073

[	LD HL , READ_SECTOR_FROM_EPCS] Z80:11cyc, R800:3cyc
00f073: 21 a1 f0

[	LD [ READ_SECTOR_CBR ] , HL] Z80:17cyc, R800:7cyc
00f076: 22 42 f2

[	LD A , 0X60] Z80:8cyc, R800:2cyc
00f079: 3e 60

[	LD [ ESERAM8K_BANK0 ] , A] Z80:14cyc, R800:6cyc
00f07b: 32 00 60

[	LD A , [ MEGASD_SD_REGISTER | ( 1 << 12 ) ]] Z80:14cyc, R800:6cyc
00f07e: 3a 00 50

[	LD DE , EPCS_BIOS1_START_ADDRESS] Z80:11cyc, R800:3cyc
00f081: 11 00 10

[	LD HL , BUFFER] Z80:11cyc, R800:3cyc
00f084: 21 00 c0

[	CALL READ_SECTOR_FROM_EPCS] Z80:18cyc, R800:5cyc
00f087: cd a1 f0

[	LD DE , EPCS_BIOS1_START_ADDRESS] Z80:11cyc, R800:3cyc
00f08a: 11 00 10

[	LD A , EXP_IO_1CHIPMSX_ID] Z80:8cyc, R800:2cyc
00f08d: 3e d4

[	OUT [ EXP_IO_VENDOR_ID_PORT ] , A] Z80:12cyc, R800:10 or 9cyc
00f08f: d3 40

[	IN A , [ 0X42 ]] Z80:12cyc, R800:10 or 9cyc
00f091: db 42

[	AND A , 0B01000000] Z80:8cyc, R800:2cyc
00f093: e6 40

[	LD HL , MESSAGE_SROM_BOOT1] Z80:11cyc, R800:3cyc
00f095: 21 d1 f4

[	JR NZ , SKIP1] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f098: 20 05

[	LD D , EPCS_BIOS2_START_ADDRESS >> 8] Z80:8cyc, R800:2cyc
00f09a: 16 28

[	LD HL , MESSAGE_SROM_BOOT2] Z80:11cyc, R800:3cyc
00f09c: 21 e3 f4

[SKIP1 :]
	label address: 0x00f09f

[	JR LOAD_BIOS] Z80:13cyc, R800:3cyc
00f09f: 18 2b

[	ENDSCOPE]
	Scope path: 

[IF ( EPCS_BIOS1_START_ADDRESS & 0X0FF ) != ( EPCS_BIOS2_START_ADDRESS & 0X0FF )]

[ENDIF]
	All condition is not selected.


[	INCLUDE ".//ocm_iplrom_load_epcs.asm"] end

[	INCLUDE ".//ocm_iplrom_srom_driver.asm"] begin
[	SCOPE READ_SECTOR_FROM_EPCS]
	Scope path: READ_SECTOR_FROM_EPCS:

[READ_SECTOR_FROM_EPCS ::]
	global label address: 0x00f0a1

[	PUSH DE] Z80:12cyc, R800:6cyc
00f0a1: d5

[	SLA E] Z80:10cyc, R800:2cyc
00f0a2: cb 23

[	RL D] Z80:10cyc, R800:2cyc
00f0a4: cb 12

[	XOR A , A] Z80:5cyc, R800:1cyc
00f0a6: af

[	LD C , B] Z80:5cyc, R800:2cyc
00f0a7: 48

[	SLA C] Z80:10cyc, R800:2cyc
00f0a8: cb 21

[	LD B , A] Z80:5cyc, R800:2cyc
00f0aa: 47

[	PUSH BC] Z80:12cyc, R800:6cyc
00f0ab: c5

[	PUSH HL] Z80:12cyc, R800:6cyc
00f0ac: e5

[	LD HL , MEGASD_SD_REGISTER | ( 0 << 12 )] Z80:11cyc, R800:3cyc
00f0ad: 21 00 40

[	LD [ HL ] , EPCS_READ_BYTES] Z80:11cyc, R800:5cyc
00f0b0: 36 03

[	LD [ HL ] , D] Z80:8cyc, R800:4cyc
00f0b2: 72

[	LD [ HL ] , E] Z80:8cyc, R800:4cyc
00f0b3: 73

[	LD [ HL ] , A] Z80:8cyc, R800:4cyc
00f0b4: 77

[	LD A , [ HL ]] Z80:8cyc, R800:4cyc
00f0b5: 7e

[	POP DE] Z80:11cyc, R800:5cyc
00f0b6: d1

[READ_ALL :]
	label address: 0x00f0b7

[READ_HALF_SECTOR :]
	label address: 0x00f0b7

[	LD A , [ HL ]] Z80:8cyc, R800:4cyc
00f0b7: 7e

[	LD [ DE ] , A] Z80:8cyc, R800:4cyc
00f0b8: 12

[	INC DE] Z80:7cyc, R800:1cyc
00f0b9: 13

[	DJNZ READ_HALF_SECTOR] Z80:14cyc(cond=true), 9cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f0ba: 10 fb

[	DEC C] Z80:5cyc, R800:1cyc
00f0bc: 0d

[	JR NZ , READ_ALL] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f0bd: 20 f8

[	LD A , [ MEGASD_SD_REGISTER | ( 1 << 12 ) ]] Z80:14cyc, R800:6cyc
00f0bf: 3a 00 50

[	POP HL] Z80:11cyc, R800:5cyc
00f0c2: e1

[	POP DE] Z80:11cyc, R800:5cyc
00f0c3: d1

[	SRL L] Z80:10cyc, R800:2cyc
00f0c4: cb 3d

[	LD H , 0] Z80:8cyc, R800:2cyc
00f0c6: 26 00

[	ADD HL , DE] Z80:12cyc, R800:1cyc
00f0c8: 19

[	EX DE , HL] Z80:5cyc, R800:1cyc
00f0c9: eb

[	XOR A , A] Z80:5cyc, R800:1cyc
00f0ca: af

[	RET] Z80:11cyc, R800:5cyc
00f0cb: c9

[	ENDSCOPE]
	Scope path: 

[	INCLUDE ".//ocm_iplrom_srom_driver.asm"] end

[	INCLUDE ".//ocm_iplrom_load_bios.asm"] begin
[	SCOPE LOAD_BIOS]
	Scope path: LOAD_BIOS:

[LOAD_BIOS ::]
	global label address: 0x00f0cc

[	LD A , EXP_IO_OCMKAI_CTRL_ID] Z80:8cyc, R800:2cyc
00f0cc: 3e d5

[	OUT [ EXP_IO_VENDOR_ID_PORT ] , A] Z80:12cyc, R800:10 or 9cyc
00f0ce: d3 40

[	LD A , 0XD4] Z80:8cyc, R800:2cyc
00f0d0: 3e d4

[	LD [ BIOS_UPDATING ] , A] Z80:14cyc, R800:6cyc
00f0d2: 32 c4 f8

[	PUSH HL] Z80:12cyc, R800:6cyc
00f0d5: e5

[	CALL READ_FIRST_SECTOR] Z80:18cyc, R800:5cyc
00f0d6: cd 1c f2

[	POP HL] Z80:11cyc, R800:5cyc
00f0d9: e1

[	RET C] Z80:12cyc(branch), 6cyc(through), R800:5cyc(branch), 1cyc(through)
00f0da: d8

[	PUSH HL] Z80:12cyc, R800:6cyc
00f0db: e5

[	LD [ CURRENT_SECTOR_LOW ] , DE] Z80:22cyc, R800:8cyc
00f0dc: ed 53 c0 f8

[	LD [ CURRENT_SECTOR_HIGH ] , BC] Z80:22cyc, R800:8cyc
00f0e0: ed 43 c2 f8

[	LD A , [ BUFFER + BIOS_IMAGE_FLAG ]] Z80:14cyc, R800:6cyc
00f0e4: 3a 04 c0

[	RRCA] Z80:5cyc, R800:1cyc
00f0e7: 0f

[	LD B , A] Z80:5cyc, R800:2cyc
00f0e8: 47

[	LD A , 0XC9] Z80:8cyc, R800:2cyc
00f0e9: 3e c9

[	JR C , MESSAGE_DISABLE] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f0eb: 38 01

[	XOR A , A] Z80:5cyc, R800:1cyc
00f0ed: af

[MESSAGE_DISABLE :]
	label address: 0x00f0ee

[	LD [ PUTC ] , A] Z80:14cyc, R800:6cyc
00f0ee: 32 45 f4

[	LD A , B] Z80:5cyc, R800:2cyc
00f0f1: 78

[	RRCA] Z80:5cyc, R800:1cyc
00f0f2: 0f

[	LD A , 2] Z80:8cyc, R800:2cyc
00f0f3: 3e 02

[	JR C , PAL_MODE] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f0f5: 38 01

[	XOR A , A] Z80:5cyc, R800:1cyc
00f0f7: af

[PAL_MODE :]
	label address: 0x00f0f8

[	OUT [ VDP_PORT1 ] , A] Z80:12cyc, R800:10 or 9cyc
00f0f8: d3 99

[	LD A , 0X89] Z80:8cyc, R800:2cyc
00f0fa: 3e 89

[	OUT [ VDP_PORT1 ] , A] Z80:12cyc, R800:10 or 9cyc
00f0fc: d3 99

[	LD HL , 0 + 0 * 40] Z80:11cyc, R800:3cyc
00f0fe: 21 00 00

[	CALL VDP_SET_VRAM_ADDRESS] Z80:18cyc, R800:5cyc
00f101: cd 43 f5

[	LD HL , MESSAGE_INITIAL_TEXT1] Z80:11cyc, R800:3cyc
00f104: 21 67 f4

[	CALL PUTS] Z80:18cyc, R800:5cyc
00f107: cd 49 f4

[	LD HL , 0 + 1 * 40] Z80:11cyc, R800:3cyc
00f10a: 21 28 00

[	CALL VDP_SET_VRAM_ADDRESS] Z80:18cyc, R800:5cyc
00f10d: cd 43 f5

[	LD HL , MESSAGE_INITIAL_TEXT2] Z80:11cyc, R800:3cyc
00f110: 21 8e f4

[	CALL PUTS] Z80:18cyc, R800:5cyc
00f113: cd 49 f4

[	LD HL , 0 + 2 * 40] Z80:11cyc, R800:3cyc
00f116: 21 50 00

[	CALL VDP_SET_VRAM_ADDRESS] Z80:18cyc, R800:5cyc
00f119: cd 43 f5

[	LD HL , MESSAGE_INITIAL_TEXT3] Z80:11cyc, R800:3cyc
00f11c: 21 9d f4

[	CALL PUTS] Z80:18cyc, R800:5cyc
00f11f: cd 49 f4

[	LD HL , 0 + 5 * 40] Z80:11cyc, R800:3cyc
00f122: 21 c8 00

[	CALL VDP_SET_VRAM_ADDRESS] Z80:18cyc, R800:5cyc
00f125: cd 43 f5

[	POP HL] Z80:11cyc, R800:5cyc
00f128: e1

[	CALL PUTS] Z80:18cyc, R800:5cyc
00f129: cd 49 f4

[	LD HL , 0 + 7 * 40] Z80:11cyc, R800:3cyc
00f12c: 21 18 01

[	CALL VDP_SET_VRAM_ADDRESS] Z80:18cyc, R800:5cyc
00f12f: cd 43 f5

[	LD HL , BUFFER + BIOS_IMAGE_COMMAND_BLOCKS] Z80:11cyc, R800:3cyc
00f132: 21 05 c0

[COMMAND_EXECUTION :]
	label address: 0x00f135

[	LD A , [ HL ]] Z80:8cyc, R800:4cyc
00f135: 7e

[	INC HL] Z80:7cyc, R800:1cyc
00f136: 23

[	OR A , A] Z80:5cyc, R800:1cyc
00f137: b7

[	JP Z , START_SYSTEM] Z80:11cyc, R800:5cyc(cond=true), 3cyc(cond=false)
00f138: ca d3 f1

[	DEC A] Z80:5cyc, R800:1cyc
00f13b: 3d

[	JR Z , TRANSFER_BIOS_IMAGE] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f13c: 28 0f

[	DEC A] Z80:5cyc, R800:1cyc
00f13e: 3d

[	JR Z , CHANGE_ESERAM_MEMORY] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f13f: 28 41

[	DEC A] Z80:5cyc, R800:1cyc
00f141: 3d

[	JR Z , WRITE_IO] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f142: 28 4c

[	DEC A] Z80:5cyc, R800:1cyc
00f144: 3d

[	JR Z , PRINT_MESSAGE] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f145: 28 51

[	DEC A] Z80:5cyc, R800:1cyc
00f147: 3d

[	JR Z , FILL_DUMMY_CODE] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f148: 28 63

[	JP BIOS_READ_ERROR] Z80:11cyc, R800:5cyc
00f14a: c3 49 f0

[TRANSFER_BIOS_IMAGE :]
	label address: 0x00f14d

[	LD A , [ HL ]] Z80:8cyc, R800:4cyc
00f14d: 7e

[	INC HL] Z80:7cyc, R800:1cyc
00f14e: 23

[	LD B , [ HL ]] Z80:8cyc, R800:4cyc
00f14f: 46

[	INC HL] Z80:7cyc, R800:1cyc
00f150: 23

[	PUSH HL] Z80:12cyc, R800:6cyc
00f151: e5

[LOAD_ROM_IMAGE :]
	label address: 0x00f152

[	LD [ ESERAM8K_BANK2 ] , A] Z80:14cyc, R800:6cyc
00f152: 32 00 70

[	INC A] Z80:5cyc, R800:1cyc
00f155: 3c

[	LD [ ESERAM8K_BANK3 ] , A] Z80:14cyc, R800:6cyc
00f156: 32 00 78

[	INC A] Z80:5cyc, R800:1cyc
00f159: 3c

[	LD C , A] Z80:5cyc, R800:2cyc
00f15a: 4f

[	PUSH BC] Z80:12cyc, R800:6cyc
00f15b: c5

[	LD DE , [ CURRENT_SECTOR_LOW ]] Z80:22cyc, R800:8cyc
00f15c: ed 5b c0 f8

[	LD BC , [ CURRENT_SECTOR_HIGH ]] Z80:22cyc, R800:8cyc
00f160: ed 4b c2 f8

[	LD B , 16384 / 512] Z80:8cyc, R800:2cyc
00f164: 06 20

[	LD HL , 0X8000] Z80:11cyc, R800:3cyc
00f166: 21 00 80

[	CALL READ_SECTOR] Z80:18cyc, R800:5cyc
00f169: cd 41 f2

[	LD [ CURRENT_SECTOR_LOW ] , DE] Z80:22cyc, R800:8cyc
00f16c: ed 53 c0 f8

[	LD [ CURRENT_SECTOR_HIGH ] , BC] Z80:22cyc, R800:8cyc
00f170: ed 43 c2 f8

[	POP BC] Z80:11cyc, R800:5cyc
00f174: c1

[	JR C , EXIT] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f175: 38 08

[	LD A , 62] Z80:8cyc, R800:2cyc
00f177: 3e 3e

[	CALL PUTC] Z80:18cyc, R800:5cyc
00f179: cd 45 f4

[	LD A , C] Z80:5cyc, R800:2cyc
00f17c: 79

[	DJNZ LOAD_ROM_IMAGE] Z80:14cyc(cond=true), 9cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f17d: 10 d3

[EXIT :]
	label address: 0x00f17f

[	POP HL] Z80:11cyc, R800:5cyc
00f17f: e1

[	JR COMMAND_EXECUTION] Z80:13cyc, R800:3cyc
00f180: 18 b3

[CHANGE_ESERAM_MEMORY :]
	label address: 0x00f182

[	LD A , EXP_IO_OCMKAI_CTRL_ID] Z80:8cyc, R800:2cyc
00f182: 3e d5

[	OUT [ EXP_IO_VENDOR_ID_PORT ] , A] Z80:12cyc, R800:10 or 9cyc
00f184: d3 40

[	LD A , EXP_IO_OCMKAI_CTRL_REG_MEMORY_ID] Z80:8cyc, R800:2cyc
00f186: 3e 02

[	OUT [ EXP_IO_OCMKAI_CTRL_REGISTER_SEL ] , A] Z80:12cyc, R800:10 or 9cyc
00f188: d3 41

[	LD A , [ HL ]] Z80:8cyc, R800:4cyc
00f18a: 7e

[	OUT [ EXP_IO_OCMKAI_CTRL_DATA ] , A] Z80:12cyc, R800:10 or 9cyc
00f18b: d3 42

[	INC HL] Z80:7cyc, R800:1cyc
00f18d: 23

[	JR COMMAND_EXECUTION] Z80:13cyc, R800:3cyc
00f18e: 18 a5

[WRITE_IO :]
	label address: 0x00f190

[	LD C , [ HL ]] Z80:8cyc, R800:4cyc
00f190: 4e

[	INC HL] Z80:7cyc, R800:1cyc
00f191: 23

[	LD A , [ HL ]] Z80:8cyc, R800:4cyc
00f192: 7e

[	INC HL] Z80:7cyc, R800:1cyc
00f193: 23

[	OUT [ C ] , A] Z80:14cyc, R800:10 or 9cyc
00f194: ed 79

[	JR COMMAND_EXECUTION] Z80:13cyc, R800:3cyc
00f196: 18 9d

[PRINT_MESSAGE :]
	label address: 0x00f198

[	PUSH HL] Z80:12cyc, R800:6cyc
00f198: e5

[	LD HL , 0 + 6 * 40] Z80:11cyc, R800:3cyc
00f199: 21 f0 00

[	CALL VDP_SET_VRAM_ADDRESS] Z80:18cyc, R800:5cyc
00f19c: cd 43 f5

[	POP HL] Z80:11cyc, R800:5cyc
00f19f: e1

[	CALL PUTS] Z80:18cyc, R800:5cyc
00f1a0: cd 49 f4

[	PUSH HL] Z80:12cyc, R800:6cyc
00f1a3: e5

[	LD HL , 0 + 7 * 40] Z80:11cyc, R800:3cyc
00f1a4: 21 18 01

[	CALL VDP_SET_VRAM_ADDRESS] Z80:18cyc, R800:5cyc
00f1a7: cd 43 f5

[	POP HL] Z80:11cyc, R800:5cyc
00f1aa: e1

[	JR COMMAND_EXECUTION] Z80:13cyc, R800:3cyc
00f1ab: 18 88

[FILL_DUMMY_CODE :]
	label address: 0x00f1ad

[	LD A , [ HL ]] Z80:8cyc, R800:4cyc
00f1ad: 7e

[	INC HL] Z80:7cyc, R800:1cyc
00f1ae: 23

[	LD B , [ HL ]] Z80:8cyc, R800:4cyc
00f1af: 46

[	INC HL] Z80:7cyc, R800:1cyc
00f1b0: 23

[	PUSH HL] Z80:12cyc, R800:6cyc
00f1b1: e5

[FILL_BLOCKS :]
	label address: 0x00f1b2

[	LD [ ESERAM8K_BANK2 ] , A] Z80:14cyc, R800:6cyc
00f1b2: 32 00 70

[	INC A] Z80:5cyc, R800:1cyc
00f1b5: 3c

[	LD [ ESERAM8K_BANK3 ] , A] Z80:14cyc, R800:6cyc
00f1b6: 32 00 78

[	INC A] Z80:5cyc, R800:1cyc
00f1b9: 3c

[	LD C , A] Z80:5cyc, R800:2cyc
00f1ba: 4f

[	PUSH BC] Z80:12cyc, R800:6cyc
00f1bb: c5

[	LD BC , 16384 - 1] Z80:11cyc, R800:3cyc
00f1bc: 01 ff 3f

[	LD HL , 0X8000] Z80:11cyc, R800:3cyc
00f1bf: 21 00 80

[	LD DE , 0X8001] Z80:11cyc, R800:3cyc
00f1c2: 11 01 80

[	LD [ HL ] , C] Z80:8cyc, R800:4cyc
00f1c5: 71

[	LDIR] Z80:23cyc(BC!=0), 18cyc(BC=0), R800:?cyc(BC!=0), 7cyc(BC=0)
00f1c6: ed b0

[	POP BC] Z80:11cyc, R800:5cyc
00f1c8: c1

[	LD A , 42] Z80:8cyc, R800:2cyc
00f1c9: 3e 2a

[	CALL PUTC] Z80:18cyc, R800:5cyc
00f1cb: cd 45 f4

[	LD A , C] Z80:5cyc, R800:2cyc
00f1ce: 79

[	DJNZ FILL_BLOCKS] Z80:14cyc(cond=true), 9cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f1cf: 10 e1

[	JR EXIT] Z80:13cyc, R800:3cyc
00f1d1: 18 ac

[START_SYSTEM ::]
	global label address: 0x00f1d3

[	LD A , EXP_IO_OCMKAI_CTRL_ID] Z80:8cyc, R800:2cyc
00f1d3: 3e d5

[	OUT [ EXP_IO_VENDOR_ID_PORT ] , A] Z80:12cyc, R800:10 or 9cyc
00f1d5: d3 40

[	LD A , EXP_IO_OCMKAI_CTRL_REG_MEMORY_ID] Z80:8cyc, R800:2cyc
00f1d7: 3e 02

[	OUT [ EXP_IO_OCMKAI_CTRL_REGISTER_SEL ] , A] Z80:12cyc, R800:10 or 9cyc
00f1d9: d3 41

[	LD A , MAIN_ROM1_BANK >> 8] Z80:8cyc, R800:2cyc
00f1db: 3e 00

[	OUT [ EXP_IO_OCMKAI_CTRL_DATA ] , A] Z80:12cyc, R800:10 or 9cyc
00f1dd: d3 42

[	LD A , MAIN_ROM1_BANK & 0XFF] Z80:8cyc, R800:2cyc
00f1df: 3e 80

[	LD [ ESERAM8K_BANK2 ] , A] Z80:14cyc, R800:6cyc
00f1e1: 32 00 70

[	LD A , 35] Z80:8cyc, R800:2cyc
00f1e4: 3e 23

[	CALL PUTC] Z80:18cyc, R800:5cyc
00f1e6: cd 45 f4

[	LD A , [ 0X8000 ]] Z80:14cyc, R800:6cyc
00f1e9: 3a 00 80

[	CP A , 0XF3] Z80:8cyc, R800:2cyc
00f1ec: fe f3

[	JP NZ , BIOS_READ_ERROR] Z80:11cyc, R800:5cyc(cond=true), 3cyc(cond=false)
00f1ee: c2 49 f0

[	LD A , [ 0X8000 + 0X002D ]] Z80:14cyc, R800:6cyc
00f1f1: 3a 2d 80

[	OR A , A] Z80:5cyc, R800:1cyc
00f1f4: b7

[	CALL NZ , SET_MSX2_PALETTE] Z80:18cyc(branch), 11cyc(through), R800:5cyc(branch), 3cyc(through)
00f1f5: c4 61 f5

[	LD A , DOS_BANK >> 8] Z80:8cyc, R800:2cyc
00f1f8: 3e 01

[	OUT [ EXP_IO_OCMKAI_CTRL_DATA ] , A] Z80:12cyc, R800:10 or 9cyc
00f1fa: d3 42

[	XOR A , A] Z80:5cyc, R800:1cyc
00f1fc: af

[	LD [ ESERAM8K_BANK0 ] , A] Z80:14cyc, R800:6cyc
00f1fd: 32 00 60

[	INC A] Z80:5cyc, R800:1cyc
00f200: 3c

[	LD [ ESERAM8K_BANK1 ] , A] Z80:14cyc, R800:6cyc
00f201: 32 00 68

[	LD [ ESERAM8K_BANK2 ] , A] Z80:14cyc, R800:6cyc
00f204: 32 00 70

[	LD [ ESERAM8K_BANK3 ] , A] Z80:14cyc, R800:6cyc
00f207: 32 00 78

[	LD A , 0XC0] Z80:8cyc, R800:2cyc
00f20a: 3e c0

[	OUT [ PRIMARY_SLOT_REGISTER ] , A] Z80:12cyc, R800:10 or 9cyc
00f20c: d3 a8

[	LD [ BIOS_UPDATING ] , A] Z80:14cyc, R800:6cyc
00f20e: 32 c4 f8

[	LD A , 3] Z80:8cyc, R800:2cyc
00f211: 3e 03

[	OUT [ EXP_IO_OCMKAI_CTRL_REGISTER_SEL ] , A] Z80:12cyc, R800:10 or 9cyc
00f213: d3 41

[	OUT [ EXP_IO_OCMKAI_CTRL_DATA ] , A] Z80:12cyc, R800:10 or 9cyc
00f215: d3 42

[	LD A , EXP_IO_1CHIPMSX_ID] Z80:8cyc, R800:2cyc
00f217: 3e d4

[	OUT [ EXP_IO_VENDOR_ID_PORT ] , A] Z80:12cyc, R800:10 or 9cyc
00f219: d3 40

[	RST 0X00] Z80:12cyc, R800:6 or 7cyc
00f21b: c7

[	ENDSCOPE]
	Scope path: 

[	SCOPE READ_FIRST_SECTOR]
	Scope path: READ_FIRST_SECTOR:

[READ_FIRST_SECTOR ::]
	global label address: 0x00f21c

[	LD B , 1] Z80:8cyc, R800:2cyc
00f21c: 06 01

[	LD HL , BUFFER] Z80:11cyc, R800:3cyc
00f21e: 21 00 c0

[	CALL READ_SECTOR] Z80:18cyc, R800:5cyc
00f221: cd 41 f2

[	RET C] Z80:12cyc(branch), 6cyc(through), R800:5cyc(branch), 1cyc(through)
00f224: d8

[	PUSH BC] Z80:12cyc, R800:6cyc
00f225: c5

[	PUSH DE] Z80:12cyc, R800:6cyc
00f226: d5

[	LD HL , BUFFER + BIOS_IMAGE_SIGNATURE] Z80:11cyc, R800:3cyc
00f227: 21 00 c0

[	LD DE , BIOS_IMAGE_SIGNATURE_REFERENCE] Z80:11cyc, R800:3cyc
00f22a: 11 3d f2

[	LD B , 4] Z80:8cyc, R800:2cyc
00f22d: 06 04

[CHECK_SIGNATURE_LOOP :]
	label address: 0x00f22f

[	LD A , [ DE ]] Z80:8cyc, R800:4cyc
00f22f: 1a

[	CP A , [ HL ]] Z80:8cyc, R800:4cyc
00f230: be

[	JR NZ , NO_MATCH] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f231: 20 07

[	INC DE] Z80:7cyc, R800:1cyc
00f233: 13

[	INC HL] Z80:7cyc, R800:1cyc
00f234: 23

[	DJNZ CHECK_SIGNATURE_LOOP] Z80:14cyc(cond=true), 9cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f235: 10 f8

[MATCH :]
	label address: 0x00f237

[	POP DE] Z80:11cyc, R800:5cyc
00f237: d1

[	POP BC] Z80:11cyc, R800:5cyc
00f238: c1

[	RET] Z80:11cyc, R800:5cyc
00f239: c9

[NO_MATCH :]
	label address: 0x00f23a

[	SCF] Z80:5cyc, R800:1cyc
00f23a: 37

[	JR MATCH] Z80:13cyc, R800:3cyc
00f23b: 18 fa

[BIOS_IMAGE_SIGNATURE_REFERENCE :]
	label address: 0x00f23d

[	DS "OCMB"]
00f23d: 4f 43 4d 42

[	ENDSCOPE]
	Scope path: 

[	SCOPE READ_SECTOR]
	Scope path: READ_SECTOR:

[READ_SECTOR ::]
	global label address: 0x00f241

[	JP SD_READ_SECTOR] Z80:11cyc, R800:5cyc
00f241: c3 fe f3

[	ENDSCOPE]
	Scope path: 

[	INCLUDE ".//ocm_iplrom_load_bios.asm"] end

[	INCLUDE ".//ocm_iplrom_fat_driver.asm"] begin
[	SCOPE LOAD_FROM_SDCARD]
	Scope path: LOAD_FROM_SDCARD:

[LOAD_FROM_SDCARD ::]
	global label address: 0x00f244

[	LD A , 0X40] Z80:8cyc, R800:2cyc
00f244: 3e 40

[	LD [ ESERAM8K_BANK0 ] , A] Z80:14cyc, R800:6cyc
00f246: 32 00 60

[SD_FIRST_PROCESS :]
	label address: 0x00f249

[	LD BC , 0X100] Z80:11cyc, R800:3cyc
00f249: 01 00 01

[	LD D , C] Z80:5cyc, R800:2cyc
00f24c: 51

[	LD E , C] Z80:5cyc, R800:2cyc
00f24d: 59

[	LD HL , BUFFER] Z80:11cyc, R800:3cyc
00f24e: 21 00 c0

[	CALL SD_READ_SECTOR] Z80:18cyc, R800:5cyc
00f251: cd fe f3

[	RET C] Z80:12cyc(branch), 6cyc(through), R800:5cyc(branch), 1cyc(through)
00f254: d8

[	CALL SEARCH_ACTIVE_PARTITION_ON_MBR] Z80:18cyc, R800:5cyc
00f255: cd 2f f4

[	RET C] Z80:12cyc(branch), 6cyc(through), R800:5cyc(branch), 1cyc(through)
00f258: d8

[	PUSH DE] Z80:12cyc, R800:6cyc
00f259: d5

[	PUSH BC] Z80:12cyc, R800:6cyc
00f25a: c5

[	LD B , 1] Z80:8cyc, R800:2cyc
00f25b: 06 01

[	LD HL , BUFFER] Z80:11cyc, R800:3cyc
00f25d: 21 00 c0

[	CALL SD_READ_SECTOR] Z80:18cyc, R800:5cyc
00f260: cd fe f3

[	POP BC] Z80:11cyc, R800:5cyc
00f263: c1

[	POP DE] Z80:11cyc, R800:5cyc
00f264: d1

[SD_CARD_IS_FAT :]
	label address: 0x00f265

[	LD HL , [ BUFFER + PBR_RESERVED_SECTORS ]] Z80:17cyc, R800:7cyc
00f265: 2a 0e c0

[	LD A , [ BUFFER + PBR_NUM_OF_FAT ]] Z80:14cyc, R800:6cyc
00f268: 3a 10 c0

[	LD B , A] Z80:5cyc, R800:2cyc
00f26b: 47

[	LD A , C] Z80:5cyc, R800:2cyc
00f26c: 79

[	ADD HL , DE] Z80:12cyc, R800:1cyc
00f26d: 19

[	ADC A , 0] Z80:8cyc, R800:2cyc
00f26e: ce 00

[	LD DE , [ BUFFER + PBR_SECTORS_PER_FAT ]] Z80:22cyc, R800:8cyc
00f270: ed 5b 16 c0

[ADD_FAT_SIZE :]
	label address: 0x00f274

[	ADD HL , DE] Z80:12cyc, R800:1cyc
00f274: 19

[	ADC A , 0] Z80:8cyc, R800:2cyc
00f275: ce 00

[	DJNZ ADD_FAT_SIZE] Z80:14cyc(cond=true), 9cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f277: 10 fb

[	LD C , A] Z80:5cyc, R800:2cyc
00f279: 4f

[	EX DE , HL] Z80:5cyc, R800:1cyc
00f27a: eb

[	ENDSCOPE]
	Scope path: 

[	SCOPE SEARCH_BIOS_NAME]
	Scope path: SEARCH_BIOS_NAME:

[SEARCH_BIOS_NAME ::]
	global label address: 0x00f27b

[	LD HL , [ BUFFER + PBR_SECTORS_PER_FAT ]] Z80:17cyc, R800:7cyc
00f27b: 2a 16 c0

[	LD [ REMAIN_FAT_SECTORS ] , HL] Z80:17cyc, R800:7cyc
00f27e: 22 b8 f8

[	PUSH BC] Z80:12cyc, R800:6cyc
00f281: c5

[	PUSH DE] Z80:12cyc, R800:6cyc
00f282: d5

[	LD HL , [ BUFFER + PBR_ROOT_ENTRIES ]] Z80:17cyc, R800:7cyc
00f283: 2a 11 c0

[	LD A , L] Z80:5cyc, R800:2cyc
00f286: 7d

[	LD B , 4] Z80:8cyc, R800:2cyc
00f287: 06 04

[ENTRIES_TO_SECTORS :]
	label address: 0x00f289

[	SRL H] Z80:10cyc, R800:2cyc
00f289: cb 3c

[	RR L] Z80:10cyc, R800:2cyc
00f28b: cb 1d

[	DJNZ ENTRIES_TO_SECTORS] Z80:14cyc(cond=true), 9cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f28d: 10 fa

[	AND A , 0X0F] Z80:8cyc, R800:2cyc
00f28f: e6 0f

[	JR Z , SKIP_INC] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f291: 28 01

[	INC HL] Z80:7cyc, R800:1cyc
00f293: 23

[SKIP_INC :]
	label address: 0x00f294

[	LD A , C] Z80:5cyc, R800:2cyc
00f294: 79

[	ADD HL , DE] Z80:12cyc, R800:1cyc
00f295: 19

[	ADC A , 0] Z80:8cyc, R800:2cyc
00f296: ce 00

[	LD [ DATA_AREA + 0 ] , HL] Z80:17cyc, R800:7cyc
00f298: 22 bd f8

[	LD [ DATA_AREA + 2 ] , A] Z80:14cyc, R800:6cyc
00f29b: 32 bf f8

[	POP DE] Z80:11cyc, R800:5cyc
00f29e: d1

[	POP BC] Z80:11cyc, R800:5cyc
00f29f: c1

[GET_NEXT_SECTOR :]
	label address: 0x00f2a0

[	LD B , 1] Z80:8cyc, R800:2cyc
00f2a0: 06 01

[	LD HL , FAT_BUFFER] Z80:11cyc, R800:3cyc
00f2a2: 21 00 c2

[	CALL SD_READ_SECTOR] Z80:18cyc, R800:5cyc
00f2a5: cd fe f3

[	LD A , C] Z80:5cyc, R800:2cyc
00f2a8: 79

[	LD [ ROOT_ENTRIES + 0 ] , DE] Z80:22cyc, R800:8cyc
00f2a9: ed 53 ba f8

[	LD [ ROOT_ENTRIES + 2 ] , A] Z80:14cyc, R800:6cyc
00f2ad: 32 bc f8

[	LD B , 512 / DIR_ENTRY_SIZE] Z80:8cyc, R800:2cyc
00f2b0: 06 10

[	LD HL , FAT_BUFFER + 10] Z80:11cyc, R800:3cyc
00f2b2: 21 0a c2

[SEARCH_LOOP :]
	label address: 0x00f2b5

[	PUSH HL] Z80:12cyc, R800:6cyc
00f2b5: e5

[	PUSH BC] Z80:12cyc, R800:6cyc
00f2b6: c5

[	LD B , 11] Z80:8cyc, R800:2cyc
00f2b7: 06 0b

[	LD DE , BIOS_NAME + 10] Z80:11cyc, R800:3cyc
00f2b9: 11 ef f2

[STRCMP :]
	label address: 0x00f2bc

[	LD A , [ DE ]] Z80:8cyc, R800:4cyc
00f2bc: 1a

[	CP A , [ HL ]] Z80:8cyc, R800:4cyc
00f2bd: be

[	JR NZ , NO_MATCH] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f2be: 20 04

[	DEC DE] Z80:7cyc, R800:1cyc
00f2c0: 1b

[	DEC HL] Z80:7cyc, R800:1cyc
00f2c1: 2b

[	DJNZ STRCMP] Z80:14cyc(cond=true), 9cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f2c2: 10 f8

[NO_MATCH :]
	label address: 0x00f2c4

[	POP BC] Z80:11cyc, R800:5cyc
00f2c4: c1

[	POP HL] Z80:11cyc, R800:5cyc
00f2c5: e1

[	JR Z , FOUND_BIOS_NAME] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f2c6: 28 28

[	LD DE , DIR_ENTRY_SIZE] Z80:11cyc, R800:3cyc
00f2c8: 11 20 00

[	ADD HL , DE] Z80:12cyc, R800:1cyc
00f2cb: 19

[	DJNZ SEARCH_LOOP] Z80:14cyc(cond=true), 9cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f2cc: 10 e7

[	LD DE , [ REMAIN_FAT_SECTORS ]] Z80:22cyc, R800:8cyc
00f2ce: ed 5b b8 f8

[	DEC DE] Z80:7cyc, R800:1cyc
00f2d2: 1b

[	LD [ REMAIN_FAT_SECTORS ] , DE] Z80:22cyc, R800:8cyc
00f2d3: ed 53 b8 f8

[	LD A , D] Z80:5cyc, R800:2cyc
00f2d7: 7a

[	OR A , E] Z80:5cyc, R800:1cyc
00f2d8: b3

[	SCF] Z80:5cyc, R800:1cyc
00f2d9: 37

[	RET Z] Z80:12cyc(branch), 6cyc(through), R800:5cyc(branch), 1cyc(through)
00f2da: c8

[	LD A , [ ROOT_ENTRIES + 2 ]] Z80:14cyc, R800:6cyc
00f2db: 3a bc f8

[	LD DE , [ ROOT_ENTRIES + 0 ]] Z80:22cyc, R800:8cyc
00f2de: ed 5b ba f8

[	LD C , A] Z80:5cyc, R800:2cyc
00f2e2: 4f

[	JR GET_NEXT_SECTOR] Z80:13cyc, R800:3cyc
00f2e3: 18 bb

[BIOS_NAME :]
	label address: 0x00f2e5

[	DS "OCMKBIOSDAT"]
00f2e5: 4f 43 4d 4b 42 49 4f 53
00f2ed: 44 41 54

[	ENDSCOPE]
	Scope path: 

[	SCOPE FOUND_BIOS_NAME]
	Scope path: FOUND_BIOS_NAME:

[FOUND_BIOS_NAME ::]
	global label address: 0x00f2f0

[	LD DE , DIR_ATTRIBUTE - 10] Z80:11cyc, R800:3cyc
00f2f0: 11 01 00

[	ADD HL , DE] Z80:12cyc, R800:1cyc
00f2f3: 19

[	LD A , [ HL ]] Z80:8cyc, R800:4cyc
00f2f4: 7e

[	AND A , ATTR_VOLUME_ID | ATTR_DIRECTORY] Z80:8cyc, R800:2cyc
00f2f5: e6 18

[NO_MATCH_EXIT ::]
	global label address: 0x00f2f7

[	SCF] Z80:5cyc, R800:1cyc
00f2f7: 37

[	RET NZ] Z80:12cyc(branch), 6cyc(through), R800:5cyc(branch), 1cyc(through)
00f2f8: c0

[	LD DE , - DIR_ATTRIBUTE + DIR_FST_CLUS_LO] Z80:11cyc, R800:3cyc
00f2f9: 11 0f 00

[	ADD HL , DE] Z80:12cyc, R800:1cyc
00f2fc: 19

[	LD E , [ HL ]] Z80:8cyc, R800:4cyc
00f2fd: 5e

[	INC HL] Z80:7cyc, R800:1cyc
00f2fe: 23

[	LD D , [ HL ]] Z80:8cyc, R800:4cyc
00f2ff: 56

[	DEC DE] Z80:7cyc, R800:1cyc
00f300: 1b

[	DEC DE] Z80:7cyc, R800:1cyc
00f301: 1b

[	LD A , [ BUFFER + PBR_SECTORS_PER_CLUSTER ]] Z80:14cyc, R800:6cyc
00f302: 3a 0d c0

[	LD B , A] Z80:5cyc, R800:2cyc
00f305: 47

[	XOR A , A] Z80:5cyc, R800:1cyc
00f306: af

[	LD H , A] Z80:5cyc, R800:2cyc
00f307: 67

[	LD L , A] Z80:5cyc, R800:2cyc
00f308: 6f

[LOOP :]
	label address: 0x00f309

[	ADD HL , DE] Z80:12cyc, R800:1cyc
00f309: 19

[	ADC A , 0] Z80:8cyc, R800:2cyc
00f30a: ce 00

[	DJNZ LOOP] Z80:14cyc(cond=true), 9cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f30c: 10 fb

[	LD DE , [ DATA_AREA + 0 ]] Z80:22cyc, R800:8cyc
00f30e: ed 5b bd f8

[	ADD HL , DE] Z80:12cyc, R800:1cyc
00f312: 19

[	LD C , A] Z80:5cyc, R800:2cyc
00f313: 4f

[	LD A , [ DATA_AREA + 2 ]] Z80:14cyc, R800:6cyc
00f314: 3a bf f8

[	ADC A , C] Z80:5cyc, R800:1cyc
00f317: 89

[	LD C , A] Z80:5cyc, R800:2cyc
00f318: 4f

[	EX DE , HL] Z80:5cyc, R800:1cyc
00f319: eb

[	ENDSCOPE]
	Scope path: 

[	SCOPE LOAD_SDBIOS]
	Scope path: LOAD_SDBIOS:

[LOAD_SDBIOS ::]
	global label address: 0x00f31a

[	LD HL , SD_READ_SECTOR] Z80:11cyc, R800:3cyc
00f31a: 21 fe f3

[	LD [ READ_SECTOR_CBR ] , HL] Z80:17cyc, R800:7cyc
00f31d: 22 42 f2

[	LD HL , MESSAGE_SD_BOOT] Z80:11cyc, R800:3cyc
00f320: 21 bf f4

[	JP LOAD_BIOS] Z80:11cyc, R800:5cyc
00f323: c3 cc f0

[	ENDSCOPE]
	Scope path: 

[	INCLUDE ".//ocm_iplrom_fat_driver.asm"] end

[	INCLUDE ".//ocm_iplrom_sd_driver.asm"] begin
[	SCOPE SET_SD_COMMAND]
	Scope path: SET_SD_COMMAND:

[SET_SD_COMMAND ::]
	global label address: 0x00f326

[	LD A , [ CARD_TYPE ]] Z80:14cyc, R800:6cyc
00f326: 3a cf ff

[	SUB A , 2] Z80:8cyc, R800:2cyc
00f329: d6 02

[	JR Z , SET_SD_MMC] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f32b: 28 0e

[	DEC A] Z80:5cyc, R800:1cyc
00f32d: 3d

[	JR Z , SET_SDHC] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f32e: 28 02

[	SCF] Z80:5cyc, R800:1cyc
00f330: 37

[	RET] Z80:11cyc, R800:5cyc
00f331: c9

[SET_SDHC :]
	label address: 0x00f332

[	LD A , [ HL ]] Z80:8cyc, R800:4cyc
00f332: 7e

[	LD [ HL ] , B] Z80:8cyc, R800:4cyc
00f333: 70

[	LD [ HL ] , 0] Z80:11cyc, R800:5cyc
00f334: 36 00

[	LD [ HL ] , C] Z80:8cyc, R800:4cyc
00f336: 71

[	LD [ HL ] , D] Z80:8cyc, R800:4cyc
00f337: 72

[	LD [ HL ] , E] Z80:8cyc, R800:4cyc
00f338: 73

[	JR SET_SRC95] Z80:13cyc, R800:3cyc
00f339: 18 0d

[SET_SD_MMC :]
	label address: 0x00f33b

[	SLA E] Z80:10cyc, R800:2cyc
00f33b: cb 23

[	RL D] Z80:10cyc, R800:2cyc
00f33d: cb 12

[	RL C] Z80:10cyc, R800:2cyc
00f33f: cb 11

[SET_CMD2 ::]
	global label address: 0x00f341

[	LD A , [ HL ]] Z80:8cyc, R800:4cyc
00f341: 7e

[	LD [ HL ] , B] Z80:8cyc, R800:4cyc
00f342: 70

[	LD [ HL ] , C] Z80:8cyc, R800:4cyc
00f343: 71

[	LD [ HL ] , D] Z80:8cyc, R800:4cyc
00f344: 72

[	LD [ HL ] , E] Z80:8cyc, R800:4cyc
00f345: 73

[	LD [ HL ] , 0] Z80:11cyc, R800:5cyc
00f346: 36 00

[SET_SRC95 :]
	label address: 0x00f348

[	LD [ HL ] , 0X95] Z80:11cyc, R800:5cyc
00f348: 36 95

[	JR SET_COMMON] Z80:13cyc, R800:3cyc
00f34a: 18 0d

[SET_CMD8 ::]
	global label address: 0x00f34c

[	LD A , [ HL ]] Z80:8cyc, R800:4cyc
00f34c: 7e

[	LD [ HL ] , 0X40 + SDCMD_SEND_IF_COND] Z80:11cyc, R800:5cyc
00f34d: 36 48

[	LD [ HL ] , 0] Z80:11cyc, R800:5cyc
00f34f: 36 00

[	LD [ HL ] , 0] Z80:11cyc, R800:5cyc
00f351: 36 00

[	LD [ HL ] , 0X01] Z80:11cyc, R800:5cyc
00f353: 36 01

[	LD [ HL ] , 0XAA] Z80:11cyc, R800:5cyc
00f355: 36 aa

[	LD [ HL ] , 0X87] Z80:11cyc, R800:5cyc
00f357: 36 87

[SET_COMMON :]
	label address: 0x00f359

[	LD A , [ HL ]] Z80:8cyc, R800:4cyc
00f359: 7e

[	LD B , 16] Z80:8cyc, R800:2cyc
00f35a: 06 10

[WAIT_COMMAND_ACCEPT :]
	label address: 0x00f35c

[	LD A , [ HL ]] Z80:8cyc, R800:4cyc
00f35c: 7e

[	CP A , 0X0FF] Z80:8cyc, R800:2cyc
00f35d: fe ff

[	CCF] Z80:5cyc, R800:1cyc
00f35f: 3f

[	RET NC] Z80:12cyc(branch), 6cyc(through), R800:5cyc(branch), 1cyc(through)
00f360: d0

[	DJNZ WAIT_COMMAND_ACCEPT] Z80:14cyc(cond=true), 9cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f361: 10 f9

[	RET] Z80:11cyc, R800:5cyc
00f363: c9

[	ENDSCOPE]
	Scope path: 

[	SCOPE SD_PREINITIALIZE]
	Scope path: SD_PREINITIALIZE:

[SD_PREINITIALIZE ::]
	global label address: 0x00f364

[	LD A , 0X40] Z80:8cyc, R800:2cyc
00f364: 3e 40

[	LD [ ESERAM8K_BANK0 ] , A] Z80:14cyc, R800:6cyc
00f366: 32 00 60

[	LD A , [ MEGASD_SD_REGISTER | ( 1 << 12 ) ]] Z80:14cyc, R800:6cyc
00f369: 3a 00 50

[	RET] Z80:11cyc, R800:5cyc
00f36c: c9

[	ENDSCOPE]
	Scope path: 

[	SCOPE SD_INITIALIZE]
	Scope path: SD_INITIALIZE:

[SD_INITIALIZE ::]
	global label address: 0x00f36d

[	CALL SD_INITIALIZE_SUB] Z80:18cyc, R800:5cyc
00f36d: cd 78 f3

[	RET C] Z80:12cyc(branch), 6cyc(through), R800:5cyc(branch), 1cyc(through)
00f370: d8

[	RET NZ] Z80:12cyc(branch), 6cyc(through), R800:5cyc(branch), 1cyc(through)
00f371: c0

[	LD HL , CARD_TYPE] Z80:11cyc, R800:3cyc
00f372: 21 cf ff

[	LD [ HL ] , E] Z80:8cyc, R800:4cyc
00f375: 73

[	XOR A , A] Z80:5cyc, R800:1cyc
00f376: af

[	RET] Z80:11cyc, R800:5cyc
00f377: c9

[SD_INITIALIZE_SUB :]
	label address: 0x00f378

[	LD HL , MEGASD_SD_REGISTER] Z80:11cyc, R800:3cyc
00f378: 21 00 40

[	LD B , 10] Z80:8cyc, R800:2cyc
00f37b: 06 0a

[WAIT_CS :]
	label address: 0x00f37d

[	LD A , [ MEGASD_SD_REGISTER | ( 1 << 12 ) ]] Z80:14cyc, R800:6cyc
00f37d: 3a 00 50

[	DJNZ WAIT_CS] Z80:14cyc(cond=true), 9cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f380: 10 fb

[	LD D , B] Z80:5cyc, R800:2cyc
00f382: 50

[	LD E , B] Z80:5cyc, R800:2cyc
00f383: 58

[	LD BC , ( ( 0X40 + SDCMD_GO_IDLE_STATE ) << 8 ) | 0X00] Z80:11cyc, R800:3cyc
00f384: 01 00 40

[	CALL SET_CMD2] Z80:18cyc, R800:5cyc
00f387: cd 41 f3

[	RET C] Z80:12cyc(branch), 6cyc(through), R800:5cyc(branch), 1cyc(through)
00f38a: d8

[	AND A , 0X0F3] Z80:8cyc, R800:2cyc
00f38b: e6 f3

[	CP A , 0X01] Z80:8cyc, R800:2cyc
00f38d: fe 01

[	RET NZ] Z80:12cyc(branch), 6cyc(through), R800:5cyc(branch), 1cyc(through)
00f38f: c0

[	CALL SET_CMD8] Z80:18cyc, R800:5cyc
00f390: cd 4c f3

[	RET C] Z80:12cyc(branch), 6cyc(through), R800:5cyc(branch), 1cyc(through)
00f393: d8

[	CP A , 1] Z80:8cyc, R800:2cyc
00f394: fe 01

[	JR NZ , DETECT_MMC] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f396: 20 35

[	LD A , [ HL ]] Z80:8cyc, R800:4cyc
00f398: 7e

[	NOP] Z80:5cyc, R800:1cyc
00f399: 00

[	LD A , [ HL ]] Z80:8cyc, R800:4cyc
00f39a: 7e

[	NOP] Z80:5cyc, R800:1cyc
00f39b: 00

[	LD A , [ HL ]] Z80:8cyc, R800:4cyc
00f39c: 7e

[	AND A , 0X0F] Z80:8cyc, R800:2cyc
00f39d: e6 0f

[	CP A , 1] Z80:8cyc, R800:2cyc
00f39f: fe 01

[	RET NZ] Z80:12cyc(branch), 6cyc(through), R800:5cyc(branch), 1cyc(through)
00f3a1: c0

[	LD A , [ HL ]] Z80:8cyc, R800:4cyc
00f3a2: 7e

[	CP A , 0XAA] Z80:8cyc, R800:2cyc
00f3a3: fe aa

[	RET NZ] Z80:12cyc(branch), 6cyc(through), R800:5cyc(branch), 1cyc(through)
00f3a5: c0

[REPEAT_APP_CMD :]
	label address: 0x00f3a6

[	LD B , ( 0X40 + SDCMD_APP_CMD )] Z80:8cyc, R800:2cyc
00f3a6: 06 77

[	CALL SET_CMD2] Z80:18cyc, R800:5cyc
00f3a8: cd 41 f3

[	RET C] Z80:12cyc(branch), 6cyc(through), R800:5cyc(branch), 1cyc(through)
00f3ab: d8

[	CP A , 1] Z80:8cyc, R800:2cyc
00f3ac: fe 01

[	RET NZ] Z80:12cyc(branch), 6cyc(through), R800:5cyc(branch), 1cyc(through)
00f3ae: c0

[	LD BC , ( ( 0X40 + SDACMD_APP_SEND_OP_COND ) << 8 ) | 0X40] Z80:11cyc, R800:3cyc
00f3af: 01 40 69

[	CALL SET_CMD2] Z80:18cyc, R800:5cyc
00f3b2: cd 41 f3

[	RET C] Z80:12cyc(branch), 6cyc(through), R800:5cyc(branch), 1cyc(through)
00f3b5: d8

[	AND A , 1] Z80:8cyc, R800:2cyc
00f3b6: e6 01

[	JR NZ , REPEAT_APP_CMD] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f3b8: 20 ec

[	LD B , ( 0X40 + SDCMD_READ_OCR )] Z80:8cyc, R800:2cyc
00f3ba: 06 7a

[	CALL SET_CMD2] Z80:18cyc, R800:5cyc
00f3bc: cd 41 f3

[	RET C] Z80:12cyc(branch), 6cyc(through), R800:5cyc(branch), 1cyc(through)
00f3bf: d8

[	LD A , [ HL ]] Z80:8cyc, R800:4cyc
00f3c0: 7e

[	CP A , [ HL ]] Z80:8cyc, R800:4cyc
00f3c1: be

[	CP A , [ HL ]] Z80:8cyc, R800:4cyc
00f3c2: be

[	CP A , [ HL ]] Z80:8cyc, R800:4cyc
00f3c3: be

[	BIT 6 , A] Z80:10cyc, R800:2cyc
00f3c4: cb 77

[	LD E , 2] Z80:8cyc, R800:2cyc
00f3c6: 1e 02

[	JR Z , NOT_SDHC] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f3c8: 28 01

[	INC E] Z80:5cyc, R800:1cyc
00f3ca: 1c

[NOT_SDHC :]
	label address: 0x00f3cb

[	XOR A , A] Z80:5cyc, R800:1cyc
00f3cb: af

[	RET] Z80:11cyc, R800:5cyc
00f3cc: c9

[DETECT_MMC :]
	label address: 0x00f3cd

[	LD B , ( 0X40 + SDCMD_APP_CMD )] Z80:8cyc, R800:2cyc
00f3cd: 06 77

[	CALL SET_CMD2] Z80:18cyc, R800:5cyc
00f3cf: cd 41 f3

[	RET C] Z80:12cyc(branch), 6cyc(through), R800:5cyc(branch), 1cyc(through)
00f3d2: d8

[	BIT 2 , A] Z80:10cyc, R800:2cyc
00f3d3: cb 57

[	JR NZ , SKIP2] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f3d5: 20 14

[	CP A , 1] Z80:8cyc, R800:2cyc
00f3d7: fe 01

[	RET NZ] Z80:12cyc(branch), 6cyc(through), R800:5cyc(branch), 1cyc(through)
00f3d9: c0

[	LD B , 0X40 + SDACMD_APP_SEND_OP_COND] Z80:8cyc, R800:2cyc
00f3da: 06 69

[	CALL SET_CMD2] Z80:18cyc, R800:5cyc
00f3dc: cd 41 f3

[	RET C] Z80:12cyc(branch), 6cyc(through), R800:5cyc(branch), 1cyc(through)
00f3df: d8

[	BIT 2 , A] Z80:10cyc, R800:2cyc
00f3e0: cb 57

[	JR NZ , SKIP2] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f3e2: 20 07

[	AND A , 1] Z80:8cyc, R800:2cyc
00f3e4: e6 01

[	JR NZ , DETECT_MMC] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f3e6: 20 e5

[	LD E , 2] Z80:8cyc, R800:2cyc
00f3e8: 1e 02

[	RET] Z80:11cyc, R800:5cyc
00f3ea: c9

[SKIP2 :]
	label address: 0x00f3eb

[	LD B , 0X40 + SDCMD_SEND_IO_COND] Z80:8cyc, R800:2cyc
00f3eb: 06 41

[	CALL SET_CMD2] Z80:18cyc, R800:5cyc
00f3ed: cd 41 f3

[	RET C] Z80:12cyc(branch), 6cyc(through), R800:5cyc(branch), 1cyc(through)
00f3f0: d8

[	CP A , 1] Z80:8cyc, R800:2cyc
00f3f1: fe 01

[	JR Z , DETECT_MMC] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f3f3: 28 d8

[	XOR A , A] Z80:5cyc, R800:1cyc
00f3f5: af

[	RET] Z80:11cyc, R800:5cyc
00f3f6: c9

[	ENDSCOPE]
	Scope path: 

[	SCOPE SD_READ_SECTOR]
	Scope path: SD_READ_SECTOR:

[RETRY_INIT :]
	label address: 0x00f3f7

[	CALL SD_INITIALIZE] Z80:18cyc, R800:5cyc
00f3f7: cd 6d f3

[	POP BC] Z80:11cyc, R800:5cyc
00f3fa: c1

[	POP DE] Z80:11cyc, R800:5cyc
00f3fb: d1

[	POP HL] Z80:11cyc, R800:5cyc
00f3fc: e1

[	RET C] Z80:12cyc(branch), 6cyc(through), R800:5cyc(branch), 1cyc(through)
00f3fd: d8

[SD_READ_SECTOR ::]
	global label address: 0x00f3fe

[	PUSH HL] Z80:12cyc, R800:6cyc
00f3fe: e5

[	PUSH DE] Z80:12cyc, R800:6cyc
00f3ff: d5

[	PUSH BC] Z80:12cyc, R800:6cyc
00f400: c5

[	LD B , 0X40 + SDCMD_READ_SINGLE_BLK] Z80:8cyc, R800:2cyc
00f401: 06 51

[	LD HL , MEGASD_SD_REGISTER] Z80:11cyc, R800:3cyc
00f403: 21 00 40

[	CALL SET_SD_COMMAND] Z80:18cyc, R800:5cyc
00f406: cd 26 f3

[	JR C , RETRY_INIT] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f409: 38 ec

[	POP BC] Z80:11cyc, R800:5cyc
00f40b: c1

[	POP DE] Z80:11cyc, R800:5cyc
00f40c: d1

[	POP HL] Z80:11cyc, R800:5cyc
00f40d: e1

[	OR A , A] Z80:5cyc, R800:1cyc
00f40e: b7

[	SCF] Z80:5cyc, R800:1cyc
00f40f: 37

[	RET NZ] Z80:12cyc(branch), 6cyc(through), R800:5cyc(branch), 1cyc(through)
00f410: c0

[	PUSH DE] Z80:12cyc, R800:6cyc
00f411: d5

[	PUSH BC] Z80:12cyc, R800:6cyc
00f412: c5

[	EX DE , HL] Z80:5cyc, R800:1cyc
00f413: eb

[	LD BC , 0X200] Z80:11cyc, R800:3cyc
00f414: 01 00 02

[	LD HL , MEGASD_SD_REGISTER] Z80:11cyc, R800:3cyc
00f417: 21 00 40

[READ_WAIT :]
	label address: 0x00f41a

[	LD A , [ HL ]] Z80:8cyc, R800:4cyc
00f41a: 7e

[	CP A , 0X0FE] Z80:8cyc, R800:2cyc
00f41b: fe fe

[	JR NZ , READ_WAIT] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f41d: 20 fb

[	LDIR] Z80:23cyc(BC!=0), 18cyc(BC=0), R800:?cyc(BC!=0), 7cyc(BC=0)
00f41f: ed b0

[	EX DE , HL] Z80:5cyc, R800:1cyc
00f421: eb

[	LD A , [ DE ]] Z80:8cyc, R800:4cyc
00f422: 1a

[	POP BC] Z80:11cyc, R800:5cyc
00f423: c1

[	LD A , [ DE ]] Z80:8cyc, R800:4cyc
00f424: 1a

[	POP DE] Z80:11cyc, R800:5cyc
00f425: d1

[	INC DE] Z80:7cyc, R800:1cyc
00f426: 13

[	LD A , D] Z80:5cyc, R800:2cyc
00f427: 7a

[	OR A , E] Z80:5cyc, R800:1cyc
00f428: b3

[	JR NZ , SKIP] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f429: 20 01

[	INC C] Z80:5cyc, R800:1cyc
00f42b: 0c

[SKIP :]
	label address: 0x00f42c

[	DJNZ SD_READ_SECTOR] Z80:14cyc(cond=true), 9cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f42c: 10 d0

[	RET] Z80:11cyc, R800:5cyc
00f42e: c9

[	ENDSCOPE]
	Scope path: 

[	SCOPE SEARCH_ACTIVE_PARTITION_ON_MBR]
	Scope path: SEARCH_ACTIVE_PARTITION_ON_MBR:

[SEARCH_ACTIVE_PARTITION_ON_MBR ::]
	global label address: 0x00f42f

[	LD B , 4] Z80:8cyc, R800:2cyc
00f42f: 06 04

[	LD HL , BUFFER + MBR_1ST_PARTITION + MBR_PARTITION_LBA_BEGIN_SECTOR] Z80:11cyc, R800:3cyc
00f431: 21 c6 c1

[TEST_PARTITION_LOOP :]
	label address: 0x00f434

[	LD E , [ HL ]] Z80:8cyc, R800:4cyc
00f434: 5e

[	INC HL] Z80:7cyc, R800:1cyc
00f435: 23

[	LD D , [ HL ]] Z80:8cyc, R800:4cyc
00f436: 56

[	INC HL] Z80:7cyc, R800:1cyc
00f437: 23

[	LD C , [ HL ]] Z80:8cyc, R800:4cyc
00f438: 4e

[	LD A , C] Z80:5cyc, R800:2cyc
00f439: 79

[	OR A , D] Z80:5cyc, R800:1cyc
00f43a: b2

[	OR A , E] Z80:5cyc, R800:1cyc
00f43b: b3

[	RET NZ] Z80:12cyc(branch), 6cyc(through), R800:5cyc(branch), 1cyc(through)
00f43c: c0

[	LD DE , 16 - 2] Z80:11cyc, R800:3cyc
00f43d: 11 0e 00

[	ADD HL , DE] Z80:12cyc, R800:1cyc
00f440: 19

[	DJNZ TEST_PARTITION_LOOP] Z80:14cyc(cond=true), 9cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f441: 10 f1

[	SCF] Z80:5cyc, R800:1cyc
00f443: 37

[	RET] Z80:11cyc, R800:5cyc
00f444: c9

[	ENDSCOPE]
	Scope path: 

[	INCLUDE ".//ocm_iplrom_sd_driver.asm"] end

[	INCLUDE ".//ocm_iplrom_message.asm"] begin
[	SCOPE PUTC]
	Scope path: PUTC:

[PUTC ::]
	global label address: 0x00f445

[	NOP] Z80:5cyc, R800:1cyc
00f445: 00

[	OUT [ VDP_PORT0 ] , A] Z80:12cyc, R800:10 or 9cyc
00f446: d3 98

[	RET] Z80:11cyc, R800:5cyc
00f448: c9

[	ENDSCOPE]
	Scope path: 

[	SCOPE PUTS]
	Scope path: PUTS:

[PUTS ::]
	global label address: 0x00f449

[	LD A , [ HL ]] Z80:8cyc, R800:4cyc
00f449: 7e

[	INC HL] Z80:7cyc, R800:1cyc
00f44a: 23

[	OR A , A] Z80:5cyc, R800:1cyc
00f44b: b7

[	RET Z] Z80:12cyc(branch), 6cyc(through), R800:5cyc(branch), 1cyc(through)
00f44c: c8

[	CALL PUTC] Z80:18cyc, R800:5cyc
00f44d: cd 45 f4

[	JR PUTS] Z80:13cyc, R800:3cyc
00f450: 18 f7

[	ENDSCOPE]
	Scope path: 

[	SCOPE PUTHEX]
	Scope path: PUTHEX:

[PUTHEX ::]
	global label address: 0x00f452

[	PUSH AF] Z80:12cyc, R800:6cyc
00f452: f5

[	RRCA] Z80:5cyc, R800:1cyc
00f453: 0f

[	RRCA] Z80:5cyc, R800:1cyc
00f454: 0f

[	RRCA] Z80:5cyc, R800:1cyc
00f455: 0f

[	RRCA] Z80:5cyc, R800:1cyc
00f456: 0f

[	CALL PUTHEX1COL] Z80:18cyc, R800:5cyc
00f457: cd 5b f4

[	POP AF] Z80:11cyc, R800:5cyc
00f45a: f1

[PUTHEX1COL :]
	label address: 0x00f45b

[	AND A , 0X0F] Z80:8cyc, R800:2cyc
00f45b: e6 0f

[	CP A , 10] Z80:8cyc, R800:2cyc
00f45d: fe 0a

[	JR C , PUT09] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f45f: 38 02

[	ADD A , 65 - 48 - 10] Z80:8cyc, R800:2cyc
00f461: c6 07

[PUT09 :]
	label address: 0x00f463

[	ADD A , 48] Z80:8cyc, R800:2cyc
00f463: c6 30

[	JR PUTC] Z80:13cyc, R800:3cyc
00f465: 18 de

[	ENDSCOPE]
	Scope path: 

[MESSAGE_INITIAL_TEXT1 ::]
	global label address: 0x00f467

[	DS "Initial Program Loader for OneChipMSX."]
00f467: 49 6e 69 74 69 61 6c 20
00f46f: 50 72 6f 67 72 61 6d 20
00f477: 4c 6f 61 64 65 72 20 66
00f47f: 6f 72 20 4f 6e 65 43 68
00f487: 69 70 4d 53 58 2e

[	DB 0]
00f48d: 00

[MESSAGE_INITIAL_TEXT2 ::]
	global label address: 0x00f48e

[	DS "Revision 4.1.1"]
00f48e: 52 65 76 69 73 69 6f 6e
00f496: 20 34 2e 31 2e 31

[	DB 0]
00f49c: 00

[MESSAGE_INITIAL_TEXT3 ::]
	global label address: 0x00f49d

[	DS "OCM-Kai Build date Sep.17th.2021 "]
00f49d: 4f 43 4d 2d 4b 61 69 20
00f4a5: 42 75 69 6c 64 20 64 61
00f4ad: 74 65 20 53 65 70 2e 31
00f4b5: 37 74 68 2e 32 30 32 31
00f4bd: 20

[	DB 0]
00f4be: 00

[MESSAGE_SD_BOOT ::]
	global label address: 0x00f4bf

[	DS "Boot from SD Card"]
00f4bf: 42 6f 6f 74 20 66 72 6f
00f4c7: 6d 20 53 44 20 43 61 72
00f4cf: 64

[	DB 0]
00f4d0: 00

[MESSAGE_SROM_BOOT1 ::]
	global label address: 0x00f4d1

[	DS "Boot from EPBIOS1"]
00f4d1: 42 6f 6f 74 20 66 72 6f
00f4d9: 6d 20 45 50 42 49 4f 53
00f4e1: 31

[	DB 0]
00f4e2: 00

[MESSAGE_SROM_BOOT2 ::]
	global label address: 0x00f4e3

[	DS "Boot from EPBIOS2"]
00f4e3: 42 6f 6f 74 20 66 72 6f
00f4eb: 6d 20 45 50 42 49 4f 53
00f4f3: 32

[	DB 0]
00f4f4: 00

[MESSAGE_BIOS_READ_ERROR ::]
	global label address: 0x00f4f5

[	DS "[ERROR!] Cannot read BIOS image."]
00f4f5: 5b 45 52 52 4f 52 21 5d
00f4fd: 20 43 61 6e 6e 6f 74 20
00f505: 72 65 61 64 20 42 49 4f
00f50d: 53 20 69 6d 61 67 65 2e

[	DB 0]
00f515: 00

[	INCLUDE ".//ocm_iplrom_message.asm"] end

[	INCLUDE ".//ocm_iplrom_vdp_driver.asm"] begin
[	SCOPE VDP_INITIALIZE]
	Scope path: VDP_INITIALIZE:

[VDP_INITIALIZE ::]
	global label address: 0x00f516

[	LD HL , VDP_CONTROL_REGS] Z80:11cyc, R800:3cyc
00f516: 21 74 f5

[	LD BC , ( ( VDP_CONTROL_REGS_END - VDP_CONTROL_REGS ) << 8 ) | VDP_PORT1] Z80:11cyc, R800:3cyc
00f519: 01 99 0c

[	OTIR] Z80:23 or 18cyc, R800:? or 12 or 11cyc
00f51c: ed b3

[	LD BC , ( ( VDP_MSX1_PALETTE_REGS_END - VDP_MSX1_PALETTE_REGS ) << 8 ) | VDP_PORT2] Z80:11cyc, R800:3cyc
00f51e: 01 9a 20

[	OTIR] Z80:23 or 18cyc, R800:? or 12 or 11cyc
00f521: ed b3

[	LD HL , 0X0000] Z80:11cyc, R800:3cyc
00f523: 21 00 00

[	CALL VDP_SET_VRAM_ADDRESS] Z80:18cyc, R800:5cyc
00f526: cd 43 f5

[	LD BC , 0X4000] Z80:11cyc, R800:3cyc
00f529: 01 00 40

[	XOR A , A] Z80:5cyc, R800:1cyc
00f52c: af

[	CALL VDP_FILL_VRAM] Z80:18cyc, R800:5cyc
00f52d: cd 4d f5

[	LD HL , 0X0800 + 32 * 8] Z80:11cyc, R800:3cyc
00f530: 21 00 09

[	CALL VDP_SET_VRAM_ADDRESS] Z80:18cyc, R800:5cyc
00f533: cd 43 f5

[	LD HL , FONT_DATA] Z80:11cyc, R800:3cyc
00f536: 21 b8 f5

[	LD BC , ( 0X00 << 8 ) | VDP_PORT0] Z80:11cyc, R800:3cyc
00f539: 01 98 00

[	OTIR] Z80:23 or 18cyc, R800:? or 12 or 11cyc
00f53c: ed b3

[	OTIR] Z80:23 or 18cyc, R800:? or 12 or 11cyc
00f53e: ed b3

[	OTIR] Z80:23 or 18cyc, R800:? or 12 or 11cyc
00f540: ed b3

[	RET] Z80:11cyc, R800:5cyc
00f542: c9

[	ENDSCOPE]
	Scope path: 

[	SCOPE VDP_SET_VRAM_ADDRESS]
	Scope path: VDP_SET_VRAM_ADDRESS:

[VDP_SET_VRAM_ADDRESS ::]
	global label address: 0x00f543

[	LD C , VDP_PORT1] Z80:8cyc, R800:2cyc
00f543: 0e 99

[	OUT [ C ] , L] Z80:14cyc, R800:10 or 9cyc
00f545: ed 69

[	LD A , H] Z80:5cyc, R800:2cyc
00f547: 7c

[	OR A , 0X40] Z80:8cyc, R800:2cyc
00f548: f6 40

[	OUT [ C ] , A] Z80:14cyc, R800:10 or 9cyc
00f54a: ed 79

[	RET] Z80:11cyc, R800:5cyc
00f54c: c9

[	ENDSCOPE]
	Scope path: 

[	SCOPE VDP_FILL_VRAM]
	Scope path: VDP_FILL_VRAM:

[VDP_FILL_VRAM ::]
	global label address: 0x00f54d

[	LD C , VDP_PORT0] Z80:8cyc, R800:2cyc
00f54d: 0e 98

[	LD B , E] Z80:5cyc, R800:2cyc
00f54f: 43

[	DEC B] Z80:5cyc, R800:1cyc
00f550: 05

[	INC B] Z80:5cyc, R800:1cyc
00f551: 04

[	JR Z , SKIP1] Z80:13cyc(cond=true), 8cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f552: 28 04

[LOOP1 :]
	label address: 0x00f554

[	OUT [ C ] , A] Z80:14cyc, R800:10 or 9cyc
00f554: ed 79

[	DJNZ LOOP1] Z80:14cyc(cond=true), 9cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f556: 10 fc

[SKIP1 :]
	label address: 0x00f558

[	INC D] Z80:5cyc, R800:1cyc
00f558: 14

[LOOP2 :]
	label address: 0x00f559

[	DEC D] Z80:5cyc, R800:1cyc
00f559: 15

[	RET Z] Z80:12cyc(branch), 6cyc(through), R800:5cyc(branch), 1cyc(through)
00f55a: c8

[LOOP3 :]
	label address: 0x00f55b

[	OUT [ C ] , A] Z80:14cyc, R800:10 or 9cyc
00f55b: ed 79

[	DJNZ LOOP3] Z80:14cyc(cond=true), 9cyc(cond=false), R800:3cyc(cond=true), 2cyc(cond=false)
00f55d: 10 fc

[	JR LOOP2] Z80:13cyc, R800:3cyc
00f55f: 18 f8

[	ENDSCOPE]
	Scope path: 

[	SCOPE SET_MSX2_PALETTE]
	Scope path: SET_MSX2_PALETTE:

[SET_MSX2_PALETTE ::]
	global label address: 0x00f561

[	PUSH AF] Z80:12cyc, R800:6cyc
00f561: f5

[	LD A , 2] Z80:8cyc, R800:2cyc
00f562: 3e 02

[	OUT [ VDP_PORT1 ] , A] Z80:12cyc, R800:10 or 9cyc
00f564: d3 99

[	LD A , 0X90] Z80:8cyc, R800:2cyc
00f566: 3e 90

[	OUT [ VDP_PORT1 ] , A] Z80:12cyc, R800:10 or 9cyc
00f568: d3 99

[	LD BC , ( ( VDP_MSX2_PALETTE_REGS_END - VDP_MSX2_PALETTE_REGS ) << 8 ) | VDP_PORT2] Z80:11cyc, R800:3cyc
00f56a: 01 9a 18

[	LD HL , VDP_MSX2_PALETTE_REGS] Z80:11cyc, R800:3cyc
00f56d: 21 a0 f5

[	OTIR] Z80:23 or 18cyc, R800:? or 12 or 11cyc
00f570: ed b3

[	POP AF] Z80:11cyc, R800:5cyc
00f572: f1

[	RET] Z80:11cyc, R800:5cyc
00f573: c9

[	ENDSCOPE]
	Scope path: 

[VDP_CONTROL_REGS :]
	label address: 0x00f574

[	DB 0X00 , 0X80]
00f574: 00 80

[	DB 0X50 , 0X81]
00f576: 50 81

[	DB 0X00 , 0X82]
00f578: 00 82

[	DB 0X01 , 0X84]
00f57a: 01 84

[	DB 0XF4 , 0X87]
00f57c: f4 87

[	DB 0X00 , 0X90]
00f57e: 00 90

[VDP_CONTROL_REGS_END :]
	label address: 0x00f580

[VDP_MSX1_PALETTE_REGS :]
	label address: 0x00f580

[	DB 0X00 , 0X00]
00f580: 00 00

[	DB 0X00 , 0X00]
00f582: 00 00

[	DB 0X33 , 0X05]
00f584: 33 05

[	DB 0X44 , 0X06]
00f586: 44 06

[	DB 0X37 , 0X02]
00f588: 37 02

[	DB 0X47 , 0X03]
00f58a: 47 03

[	DB 0X52 , 0X03]
00f58c: 52 03

[	DB 0X36 , 0X05]
00f58e: 36 05

[	DB 0X62 , 0X03]
00f590: 62 03

[	DB 0X63 , 0X04]
00f592: 63 04

[	DB 0X53 , 0X06]
00f594: 53 06

[	DB 0X64 , 0X06]
00f596: 64 06

[	DB 0X21 , 0X04]
00f598: 21 04

[	DB 0X55 , 0X03]
00f59a: 55 03

[	DB 0X55 , 0X05]
00f59c: 55 05

[	DB 0X77 , 0X07]
00f59e: 77 07

[VDP_MSX1_PALETTE_REGS_END :]
	label address: 0x00f5a0

[VDP_MSX2_PALETTE_REGS ::]
	global label address: 0x00f5a0

[	DB 0X11 , 0X06]
00f5a0: 11 06

[	DB 0X33 , 0X07]
00f5a2: 33 07

[	DB 0X17 , 0X01]
00f5a4: 17 01

[	DB 0X27 , 0X03]
00f5a6: 27 03

[	DB 0X51 , 0X01]
00f5a8: 51 01

[	DB 0X27 , 0X06]
00f5aa: 27 06

[	DB 0X71 , 0X01]
00f5ac: 71 01

[	DB 0X73 , 0X03]
00f5ae: 73 03

[	DB 0X61 , 0X06]
00f5b0: 61 06

[	DB 0X64 , 0X06]
00f5b2: 64 06

[	DB 0X11 , 0X04]
00f5b4: 11 04

[	DB 0X65 , 0X02]
00f5b6: 65 02

[VDP_MSX2_PALETTE_REGS_END ::]
	global label address: 0x00f5b8

[	INCLUDE ".//zg6x8_font.asm"] begin
[FONT_DATA ::]
	global label address: 0x00f5b8

[	DB 0X00 , 0X00 , 0X00 , 0X00 , 0X00 , 0X00 , 0X00 , 0X00]
00f5b8: 00 00 00 00 00 00 00 00

[	DB 0X00 , 0X20 , 0X20 , 0X20 , 0X20 , 0X00 , 0X20 , 0X00]
00f5c0: 00 20 20 20 20 00 20 00

[	DB 0X00 , 0X48 , 0X48 , 0X00 , 0X00 , 0X00 , 0X00 , 0X00]
00f5c8: 00 48 48 00 00 00 00 00

[	DB 0X00 , 0X00 , 0X50 , 0XF8 , 0X50 , 0XF8 , 0X50 , 0X00]
00f5d0: 00 00 50 f8 50 f8 50 00

[	DB 0X00 , 0X20 , 0XF8 , 0XA0 , 0XF8 , 0X28 , 0XF8 , 0X20]
00f5d8: 00 20 f8 a0 f8 28 f8 20

[	DB 0X00 , 0X00 , 0XC8 , 0XD0 , 0X20 , 0X58 , 0X98 , 0X00]
00f5e0: 00 00 c8 d0 20 58 98 00

[	DB 0X00 , 0X40 , 0XA0 , 0X40 , 0XA8 , 0X90 , 0X68 , 0X00]
00f5e8: 00 40 a0 40 a8 90 68 00

[	DB 0X00 , 0X20 , 0X40 , 0X00 , 0X00 , 0X00 , 0X00 , 0X00]
00f5f0: 00 20 40 00 00 00 00 00

[	DB 0X00 , 0X08 , 0X10 , 0X10 , 0X10 , 0X10 , 0X08 , 0X00]
00f5f8: 00 08 10 10 10 10 08 00

[	DB 0X00 , 0X40 , 0X20 , 0X20 , 0X20 , 0X20 , 0X40 , 0X00]
00f600: 00 40 20 20 20 20 40 00

[	DB 0X00 , 0X00 , 0X50 , 0X20 , 0XF8 , 0X20 , 0X50 , 0X00]
00f608: 00 00 50 20 f8 20 50 00

[	DB 0X00 , 0X00 , 0X20 , 0X20 , 0XF8 , 0X20 , 0X20 , 0X00]
00f610: 00 00 20 20 f8 20 20 00

[	DB 0X00 , 0X00 , 0X00 , 0X00 , 0X00 , 0X20 , 0X20 , 0X40]
00f618: 00 00 00 00 00 20 20 40

[	DB 0X00 , 0X00 , 0X00 , 0X00 , 0XF8 , 0X00 , 0X00 , 0X00]
00f620: 00 00 00 00 f8 00 00 00

[	DB 0X00 , 0X00 , 0X00 , 0X00 , 0X00 , 0X60 , 0X60 , 0X00]
00f628: 00 00 00 00 00 60 60 00

[	DB 0X00 , 0X00 , 0X08 , 0X10 , 0X20 , 0X40 , 0X80 , 0X00]
00f630: 00 00 08 10 20 40 80 00

[	DB 0X00 , 0X70 , 0X98 , 0XA8 , 0XA8 , 0XC8 , 0X70 , 0X00]
00f638: 00 70 98 a8 a8 c8 70 00

[	DB 0X00 , 0X20 , 0X60 , 0X20 , 0X20 , 0X20 , 0XF8 , 0X00]
00f640: 00 20 60 20 20 20 f8 00

[	DB 0X00 , 0X70 , 0X88 , 0X08 , 0X70 , 0X80 , 0XF8 , 0X00]
00f648: 00 70 88 08 70 80 f8 00

[	DB 0X00 , 0X70 , 0X88 , 0X30 , 0X08 , 0X88 , 0X70 , 0X00]
00f650: 00 70 88 30 08 88 70 00

[	DB 0X00 , 0X10 , 0X30 , 0X50 , 0X90 , 0XF8 , 0X10 , 0X00]
00f658: 00 10 30 50 90 f8 10 00

[	DB 0X00 , 0XF8 , 0X80 , 0XF0 , 0X08 , 0X88 , 0X70 , 0X00]
00f660: 00 f8 80 f0 08 88 70 00

[	DB 0X00 , 0X70 , 0X80 , 0XF0 , 0X88 , 0X88 , 0X70 , 0X00]
00f668: 00 70 80 f0 88 88 70 00

[	DB 0X00 , 0XF8 , 0X08 , 0X10 , 0X20 , 0X20 , 0X20 , 0X00]
00f670: 00 f8 08 10 20 20 20 00

[	DB 0X00 , 0X70 , 0X88 , 0X70 , 0X88 , 0X88 , 0X70 , 0X00]
00f678: 00 70 88 70 88 88 70 00

[	DB 0X00 , 0X70 , 0X88 , 0X88 , 0X78 , 0X08 , 0X70 , 0X00]
00f680: 00 70 88 88 78 08 70 00

[	DB 0X00 , 0X00 , 0X20 , 0X00 , 0X00 , 0X20 , 0X00 , 0X00]
00f688: 00 00 20 00 00 20 00 00

[	DB 0X00 , 0X00 , 0X20 , 0X00 , 0X00 , 0X20 , 0X20 , 0X40]
00f690: 00 00 20 00 00 20 20 40

[	DB 0X00 , 0X00 , 0X10 , 0X20 , 0X40 , 0X20 , 0X10 , 0X00]
00f698: 00 00 10 20 40 20 10 00

[	DB 0X00 , 0X00 , 0X00 , 0X78 , 0X00 , 0X78 , 0X00 , 0X00]
00f6a0: 00 00 00 78 00 78 00 00

[	DB 0X00 , 0X00 , 0X20 , 0X10 , 0X08 , 0X10 , 0X20 , 0X00]
00f6a8: 00 00 20 10 08 10 20 00

[	DB 0X00 , 0X70 , 0X88 , 0X10 , 0X20 , 0X00 , 0X20 , 0X00]
00f6b0: 00 70 88 10 20 00 20 00

[	DB 0X00 , 0X70 , 0XA8 , 0XA8 , 0XB0 , 0X80 , 0X78 , 0X00]
00f6b8: 00 70 a8 a8 b0 80 78 00

[	DB 0X00 , 0X78 , 0X88 , 0X88 , 0XF8 , 0X88 , 0X88 , 0X00]
00f6c0: 00 78 88 88 f8 88 88 00

[	DB 0X00 , 0XF0 , 0X88 , 0XF0 , 0X88 , 0X88 , 0XF0 , 0X00]
00f6c8: 00 f0 88 f0 88 88 f0 00

[	DB 0X00 , 0X70 , 0X88 , 0X80 , 0X80 , 0X88 , 0X70 , 0X00]
00f6d0: 00 70 88 80 80 88 70 00

[	DB 0X00 , 0XE0 , 0X90 , 0X88 , 0X88 , 0X88 , 0XF0 , 0X00]
00f6d8: 00 e0 90 88 88 88 f0 00

[	DB 0X00 , 0XF8 , 0X80 , 0XF0 , 0X80 , 0X80 , 0XF8 , 0X00]
00f6e0: 00 f8 80 f0 80 80 f8 00

[	DB 0X00 , 0XF8 , 0X80 , 0XF0 , 0X80 , 0X80 , 0X80 , 0X00]
00f6e8: 00 f8 80 f0 80 80 80 00

[	DB 0X00 , 0X70 , 0X88 , 0X80 , 0XB8 , 0X88 , 0X70 , 0X00]
00f6f0: 00 70 88 80 b8 88 70 00

[	DB 0X00 , 0X88 , 0X88 , 0XF8 , 0X88 , 0X88 , 0X88 , 0X00]
00f6f8: 00 88 88 f8 88 88 88 00

[	DB 0X00 , 0XF8 , 0X20 , 0X20 , 0X20 , 0X20 , 0XF8 , 0X00]
00f700: 00 f8 20 20 20 20 f8 00

[	DB 0X00 , 0X08 , 0X08 , 0X08 , 0X88 , 0X88 , 0X70 , 0X00]
00f708: 00 08 08 08 88 88 70 00

[	DB 0X00 , 0X90 , 0XA0 , 0XC0 , 0XA0 , 0X90 , 0X88 , 0X00]
00f710: 00 90 a0 c0 a0 90 88 00

[	DB 0X00 , 0X80 , 0X80 , 0X80 , 0X80 , 0X80 , 0XF8 , 0X00]
00f718: 00 80 80 80 80 80 f8 00

[	DB 0X00 , 0X88 , 0XD8 , 0XA8 , 0XA8 , 0X88 , 0X88 , 0X00]
00f720: 00 88 d8 a8 a8 88 88 00

[	DB 0X00 , 0X88 , 0X88 , 0XC8 , 0XA8 , 0X98 , 0X88 , 0X00]
00f728: 00 88 88 c8 a8 98 88 00

[	DB 0X00 , 0X70 , 0X88 , 0X88 , 0X88 , 0X88 , 0X70 , 0X00]
00f730: 00 70 88 88 88 88 70 00

[	DB 0X00 , 0XF0 , 0X88 , 0X88 , 0XF0 , 0X80 , 0X80 , 0X00]
00f738: 00 f0 88 88 f0 80 80 00

[	DB 0X00 , 0X70 , 0X88 , 0X88 , 0X88 , 0XA8 , 0X70 , 0X10]
00f740: 00 70 88 88 88 a8 70 10

[	DB 0X00 , 0XF0 , 0X88 , 0X88 , 0XF0 , 0X90 , 0X88 , 0X00]
00f748: 00 f0 88 88 f0 90 88 00

[	DB 0X00 , 0X70 , 0X80 , 0X70 , 0X08 , 0X88 , 0X70 , 0X00]
00f750: 00 70 80 70 08 88 70 00

[	DB 0X00 , 0XF8 , 0X20 , 0X20 , 0X20 , 0X20 , 0X20 , 0X00]
00f758: 00 f8 20 20 20 20 20 00

[	DB 0X00 , 0X88 , 0X88 , 0X88 , 0X88 , 0X88 , 0X70 , 0X00]
00f760: 00 88 88 88 88 88 70 00

[	DB 0X00 , 0X88 , 0X88 , 0X88 , 0X88 , 0X50 , 0X20 , 0X00]
00f768: 00 88 88 88 88 50 20 00

[	DB 0X00 , 0X88 , 0X88 , 0X88 , 0XA8 , 0XA8 , 0X50 , 0X00]
00f770: 00 88 88 88 a8 a8 50 00

[	DB 0X00 , 0X88 , 0X50 , 0X20 , 0X20 , 0X50 , 0X88 , 0X00]
00f778: 00 88 50 20 20 50 88 00

[	DB 0X00 , 0X88 , 0X88 , 0X50 , 0X20 , 0X20 , 0X20 , 0X00]
00f780: 00 88 88 50 20 20 20 00

[	DB 0X00 , 0XF8 , 0X90 , 0X20 , 0X40 , 0X88 , 0XF8 , 0X00]
00f788: 00 f8 90 20 40 88 f8 00

[	DB 0X00 , 0X70 , 0X40 , 0X40 , 0X40 , 0X40 , 0X70 , 0X00]
00f790: 00 70 40 40 40 40 70 00

[	DB 0X00 , 0X00 , 0X80 , 0X40 , 0X20 , 0X10 , 0X08 , 0X00]
00f798: 00 00 80 40 20 10 08 00

[	DB 0X00 , 0X70 , 0X10 , 0X10 , 0X10 , 0X10 , 0X70 , 0X00]
00f7a0: 00 70 10 10 10 10 70 00

[	DB 0X00 , 0X20 , 0X50 , 0X88 , 0X00 , 0X00 , 0X00 , 0X00]
00f7a8: 00 20 50 88 00 00 00 00

[	DB 0X00 , 0X00 , 0X00 , 0X00 , 0X00 , 0X00 , 0X00 , 0XFC]
00f7b0: 00 00 00 00 00 00 00 fc

[	DB 0X00 , 0X40 , 0X40 , 0X20 , 0X00 , 0X00 , 0X00 , 0X00]
00f7b8: 00 40 40 20 00 00 00 00

[	DB 0X00 , 0X00 , 0X70 , 0X08 , 0X78 , 0X88 , 0X78 , 0X00]
00f7c0: 00 00 70 08 78 88 78 00

[	DB 0X00 , 0X80 , 0X80 , 0XF0 , 0X88 , 0X88 , 0XF0 , 0X00]
00f7c8: 00 80 80 f0 88 88 f0 00

[	DB 0X00 , 0X00 , 0X70 , 0X88 , 0X80 , 0X80 , 0X78 , 0X00]
00f7d0: 00 00 70 88 80 80 78 00

[	DB 0X00 , 0X08 , 0X08 , 0X78 , 0X88 , 0X88 , 0X78 , 0X00]
00f7d8: 00 08 08 78 88 88 78 00

[	DB 0X00 , 0X00 , 0X70 , 0X88 , 0XF0 , 0X80 , 0X78 , 0X00]
00f7e0: 00 00 70 88 f0 80 78 00

[	DB 0X00 , 0X18 , 0X20 , 0X30 , 0X20 , 0X20 , 0X20 , 0X00]
00f7e8: 00 18 20 30 20 20 20 00

[	DB 0X00 , 0X00 , 0X78 , 0X88 , 0X88 , 0X78 , 0X08 , 0X70]
00f7f0: 00 00 78 88 88 78 08 70

[	DB 0X00 , 0X80 , 0X80 , 0XF0 , 0X88 , 0X88 , 0X88 , 0X00]
00f7f8: 00 80 80 f0 88 88 88 00

[	DB 0X00 , 0X20 , 0X00 , 0X60 , 0X20 , 0X20 , 0X70 , 0X00]
00f800: 00 20 00 60 20 20 70 00

[	DB 0X00 , 0X08 , 0X00 , 0X08 , 0X08 , 0X08 , 0X48 , 0X30]
00f808: 00 08 00 08 08 08 48 30

[	DB 0X00 , 0X40 , 0X50 , 0X60 , 0X60 , 0X50 , 0X48 , 0X00]
00f810: 00 40 50 60 60 50 48 00

[	DB 0X00 , 0X20 , 0X20 , 0X20 , 0X20 , 0X20 , 0X18 , 0X00]
00f818: 00 20 20 20 20 20 18 00

[	DB 0X00 , 0X00 , 0XD0 , 0XA8 , 0XA8 , 0XA8 , 0XA8 , 0X00]
00f820: 00 00 d0 a8 a8 a8 a8 00

[	DB 0X00 , 0X00 , 0XF0 , 0X88 , 0X88 , 0X88 , 0X88 , 0X00]
00f828: 00 00 f0 88 88 88 88 00

[	DB 0X00 , 0X00 , 0X70 , 0X88 , 0X88 , 0X88 , 0X70 , 0X00]
00f830: 00 00 70 88 88 88 70 00

[	DB 0X00 , 0X00 , 0XF0 , 0X88 , 0X88 , 0XF0 , 0X80 , 0X80]
00f838: 00 00 f0 88 88 f0 80 80

[	DB 0X00 , 0X00 , 0X70 , 0X90 , 0X90 , 0X70 , 0X10 , 0X18]
00f840: 00 00 70 90 90 70 10 18

[	DB 0X00 , 0X00 , 0X38 , 0X40 , 0X40 , 0X40 , 0X40 , 0X00]
00f848: 00 00 38 40 40 40 40 00

[	DB 0X00 , 0X00 , 0X70 , 0X80 , 0X70 , 0X08 , 0XF0 , 0X00]
00f850: 00 00 70 80 70 08 f0 00

[	DB 0X00 , 0X20 , 0X70 , 0X20 , 0X20 , 0X20 , 0X18 , 0X00]
00f858: 00 20 70 20 20 20 18 00

[	DB 0X00 , 0X00 , 0X88 , 0X88 , 0X88 , 0X88 , 0X70 , 0X00]
00f860: 00 00 88 88 88 88 70 00

[	DB 0X00 , 0X00 , 0X88 , 0X88 , 0X50 , 0X50 , 0X20 , 0X00]
00f868: 00 00 88 88 50 50 20 00

[	DB 0X00 , 0X00 , 0X88 , 0XA8 , 0XA8 , 0XA8 , 0X50 , 0X00]
00f870: 00 00 88 a8 a8 a8 50 00

[	DB 0X00 , 0X00 , 0X88 , 0X50 , 0X20 , 0X50 , 0X88 , 0X00]
00f878: 00 00 88 50 20 50 88 00

[	DB 0X00 , 0X00 , 0X88 , 0X88 , 0X88 , 0X78 , 0X08 , 0X70]
00f880: 00 00 88 88 88 78 08 70

[	DB 0X00 , 0X00 , 0XF8 , 0X10 , 0X20 , 0X40 , 0XF8 , 0X00]
00f888: 00 00 f8 10 20 40 f8 00

[	DB 0X00 , 0X38 , 0X20 , 0XC0 , 0X20 , 0X20 , 0X38 , 0X00]
00f890: 00 38 20 c0 20 20 38 00

[	DB 0X00 , 0X20 , 0X20 , 0X20 , 0X20 , 0X20 , 0X20 , 0X00]
00f898: 00 20 20 20 20 20 20 00

[	DB 0X00 , 0XE0 , 0X20 , 0X18 , 0X20 , 0X20 , 0XE0 , 0X00]
00f8a0: 00 e0 20 18 20 20 e0 00

[	DB 0X00 , 0X28 , 0X50 , 0X00 , 0X00 , 0X00 , 0X00 , 0X00]
00f8a8: 00 28 50 00 00 00 00 00

[	DB 0X30 , 0X48 , 0XB4 , 0XC4 , 0XC4 , 0XB4 , 0X48 , 0X30]
00f8b0: 30 48 b4 c4 c4 b4 48 30

[	INCLUDE ".//zg6x8_font.asm"] end

[	INCLUDE ".//ocm_iplrom_vdp_driver.asm"] end

[END_OF_CODE :]
	label address: 0x00f8b8

[IF ( ( END_OF_CODE - START_OF_CODE ) + ( ROM_CODE_ADDRESS - ENTRY_POINT ) ) > 4096]

[ELSE]

MESSAGE: Size is not a problem. (2250byte): ocm_iplrom4.asm(216)
[ENDIF]
	Selected {ELSE} block.


<< label >>
ATTR_ARCHIVE 32 ( 0x20 )
ATTR_DIRECTORY 16 ( 0x10 )
ATTR_HIDDEN 2 ( 0x2 )
ATTR_LONG_FILE_NAME 15 ( 0xf )
ATTR_READ_ONLY 1 ( 0x1 )
ATTR_SYSTEM 4 ( 0x4 )
ATTR_VOLUME_ID 8 ( 0x8 )
BIOS_IMAGE_COMMAND_BLOCKS 5 ( 0x5 )
BIOS_IMAGE_FLAG 4 ( 0x4 )
BIOS_IMAGE_FLAG_MESSAGE_ENABLE_BIT 1 ( 0x1 )
BIOS_IMAGE_FLAG_PAL_BIT 2 ( 0x2 )
BIOS_IMAGE_FLAG_RESERVE_2 4 ( 0x4 )
BIOS_IMAGE_FLAG_RESERVE_3 8 ( 0x8 )
BIOS_IMAGE_FLAG_RESERVE_4 16 ( 0x10 )
BIOS_IMAGE_FLAG_RESERVE_5 32 ( 0x20 )
BIOS_IMAGE_FLAG_RESERVE_6 64 ( 0x40 )
BIOS_IMAGE_FLAG_RESERVE_7 128 ( 0x80 )
BIOS_IMAGE_SIGNATURE 0 ( 0x0 )
BIOS_READ_ERROR 61513 ( 0xf049 )
BIOS_UPDATING 63684 ( 0xf8c4 )
BUFFER 49152 ( 0xc000 )
CARD_TYPE 65487 ( 0xffcf )
CURRENT_SECTOR_HIGH 63682 ( 0xf8c2 )
CURRENT_SECTOR_LOW 63680 ( 0xf8c0 )
DATA_AREA 63677 ( 0xf8bd )
DIR_ATTRIBUTE 11 ( 0xb )
DIR_CRT_DATE 16 ( 0x10 )
DIR_CRT_TIME 14 ( 0xe )
DIR_CRT_TIME_TENTH 13 ( 0xd )
DIR_ENTRY_SIZE 32 ( 0x20 )
DIR_FILE_SIZE 28 ( 0x1c )
DIR_FST_CLUS_HI 20 ( 0x14 )
DIR_FST_CLUS_LO 26 ( 0x1a )
DIR_LST_ACC_DATE 18 ( 0x12 )
DIR_NAME 0 ( 0x0 )
DIR_NEXT_ENTRY 32 ( 0x20 )
DIR_NT_RES 12 ( 0xc )
DIR_WRT_DATE 24 ( 0x18 )
DIR_WRT_TIME 22 ( 0x16 )
DOS_BANK 384 ( 0x180 )
DRAM_CODE_ADDRESS 61440 ( 0xf000 )
END_OF_CODE 63672 ( 0xf8b8 )
ENTRY_POINT 0 ( 0x0 )
EPCS_BIOS1_START_ADDRESS 4096 ( 0x1000 )
EPCS_BIOS2_START_ADDRESS 10240 ( 0x2800 )
EPCS_ERASE_BULK 199 ( 0xc7 )
EPCS_ERASE_SECTOR 216 ( 0xd8 )
EPCS_FAST_READ 11 ( 0xb )
EPCS_READ_BYTES 3 ( 0x3 )
EPCS_READ_DEVICE_ID 159 ( 0x9f )
EPCS_READ_SILICON_ID 171 ( 0xab )
EPCS_READ_STATUS 5 ( 0x5 )
EPCS_WRITE_BYTES 2 ( 0x2 )
EPCS_WRITE_DISABLE 4 ( 0x4 )
EPCS_WRITE_ENABLE 6 ( 0x6 )
EPCS_WRITE_STATUS 1 ( 0x1 )
ESERAM8K_BANK0 24576 ( 0x6000 )
ESERAM8K_BANK1 26624 ( 0x6800 )
ESERAM8K_BANK2 28672 ( 0x7000 )
ESERAM8K_BANK3 30720 ( 0x7800 )
ESESCC1_0_BANK 640 ( 0x280 )
ESESCC1_1_BANK 896 ( 0x380 )
ESESCC2_0_BANK 1152 ( 0x480 )
ESESCC2_1_BANK 1408 ( 0x580 )
EXP_IO_1CHIPMSX_ID 212 ( 0xd4 )
EXP_IO_OCMKAI_CTRL_DATA 66 ( 0x42 )
EXP_IO_OCMKAI_CTRL_ID 213 ( 0xd5 )
EXP_IO_OCMKAI_CTRL_REGISTER_SEL 65 ( 0x41 )
EXP_IO_OCMKAI_CTRL_REG_MAJOR_VER 0 ( 0x0 )
EXP_IO_OCMKAI_CTRL_REG_MEMORY_ID 2 ( 0x2 )
EXP_IO_OCMKAI_CTRL_REG_MINOR_VER 1 ( 0x1 )
EXP_IO_VENDOR_ID_PORT 64 ( 0x40 )
FAT_BUFFER 49664 ( 0xc200 )
FONT_DATA 62904 ( 0xf5b8 )
FORCE_BIOS_LOAD_FROM_EPBIOS 61510 ( 0xf046 )
FORCE_BIOS_LOAD_FROM_SDCARD 61507 ( 0xf043 )
FOUND_BIOS_NAME 62192 ( 0xf2f0 )
FOUND_BIOS_NAME:LOOP 62217 ( 0xf309 )
KANJI_ROM_BANK 3200 ( 0xc80 )
LINEAR_ROM_BANK 4224 ( 0x1080 )
LOAD_BIOS 61644 ( 0xf0cc )
LOAD_BIOS:CHANGE_ESERAM_MEMORY 61826 ( 0xf182 )
LOAD_BIOS:COMMAND_EXECUTION 61749 ( 0xf135 )
LOAD_BIOS:EXIT 61823 ( 0xf17f )
LOAD_BIOS:FILL_BLOCKS 61874 ( 0xf1b2 )
LOAD_BIOS:FILL_DUMMY_CODE 61869 ( 0xf1ad )
LOAD_BIOS:LOAD_ROM_IMAGE 61778 ( 0xf152 )
LOAD_BIOS:MESSAGE_DISABLE 61678 ( 0xf0ee )
LOAD_BIOS:PAL_MODE 61688 ( 0xf0f8 )
LOAD_BIOS:PRINT_MESSAGE 61848 ( 0xf198 )
LOAD_BIOS:TRANSFER_BIOS_IMAGE 61773 ( 0xf14d )
LOAD_BIOS:WRITE_IO 61840 ( 0xf190 )
LOAD_FROM_EPCS 61555 ( 0xf073 )
LOAD_FROM_EPCS:SKIP1 61599 ( 0xf09f )
LOAD_FROM_SDCARD 62020 ( 0xf244 )
LOAD_FROM_SDCARD:ADD_FAT_SIZE 62068 ( 0xf274 )
LOAD_FROM_SDCARD:SD_CARD_IS_FAT 62053 ( 0xf265 )
LOAD_FROM_SDCARD:SD_FIRST_PROCESS 62025 ( 0xf249 )
LOAD_SDBIOS 62234 ( 0xf31a )
MAIN_ROM1_BANK 128 ( 0x80 )
MAIN_ROM2_BANK 130 ( 0x82 )
MAPPER_RAM0_BANK 2176 ( 0x880 )
MAPPER_RAM1_BANK 2432 ( 0x980 )
MAPPER_RAM2_BANK 2688 ( 0xa80 )
MAPPER_RAM3_BANK 2944 ( 0xb80 )
MBR_1ST_PARTITION 446 ( 0x1be )
MBR_2ND_PARTITION 462 ( 0x1ce )
MBR_3RD_PARTITION 478 ( 0x1de )
MBR_4TH_PARTITION 494 ( 0x1ee )
MBR_BOOT_SIGNATURE 510 ( 0x1fe )
MBR_BOOT_STRAP_LOADER 0 ( 0x0 )
MBR_PARTITION_BOOT_FLAG 0 ( 0x0 )
MBR_PARTITION_CHS_BEGIN_SECTOR 1 ( 0x1 )
MBR_PARTITION_CHS_END_SECTOR 5 ( 0x5 )
MBR_PARTITION_LBA_BEGIN_SECTOR 8 ( 0x8 )
MBR_PARTITION_TOTAL_SECTORS 12 ( 0xc )
MBR_PARTITION_TYPE 4 ( 0x4 )
MEGASD_SD_REGISTER 16384 ( 0x4000 )
MESSAGE_BIOS_READ_ERROR 62709 ( 0xf4f5 )
MESSAGE_INITIAL_TEXT1 62567 ( 0xf467 )
MESSAGE_INITIAL_TEXT2 62606 ( 0xf48e )
MESSAGE_INITIAL_TEXT3 62621 ( 0xf49d )
MESSAGE_SD_BOOT 62655 ( 0xf4bf )
MESSAGE_SROM_BOOT1 62673 ( 0xf4d1 )
MESSAGE_SROM_BOOT2 62691 ( 0xf4e3 )
MSG_END_OF_INIT 61546 ( 0xf06a )
MSG_ENTER 61530 ( 0xf05a )
MSG_SD_PREINIT 61538 ( 0xf062 )
MSX_MUSIC_BANK 146 ( 0x92 )
NC000_BANK 168 ( 0xa8 )
NC001_BANK 1664 ( 0x680 )
NC002_BANK 1920 ( 0x780 )
NC003_BANK 3232 ( 0xca0 )
NC004_BANK 3456 ( 0xd80 )
NC005_BANK 3712 ( 0xe80 )
NC006_BANK 3968 ( 0xf80 )
NC007_BANK 4268 ( 0x10ac )
NC008_BANK 4232 ( 0x1088 )
NC010_BANK 4992 ( 0x1380 )
NC011_BANK 5248 ( 0x1480 )
NC012_BANK 5504 ( 0x1580 )
NC013_BANK 5760 ( 0x1680 )
NC014_BANK 6016 ( 0x1780 )
NC015_BANK 6272 ( 0x1880 )
NC016_BANK 6528 ( 0x1980 )
NC017_BANK 6784 ( 0x1a80 )
NC018_BANK 7040 ( 0x1b80 )
NC019_BANK 7296 ( 0x1c80 )
NC020_BANK 7552 ( 0x1d80 )
NC021_BANK 7808 ( 0x1e80 )
NO_LOADED 61498 ( 0xf03a )
NO_MATCH_EXIT 62199 ( 0xf2f7 )
OPTION_ROM_BANK 154 ( 0x9a )
PANA_MEGA0_BANK 4224 ( 0x1080 )
PANA_MEGA1_BANK 4264 ( 0x10a8 )
PANA_MEGA2_BANK 4288 ( 0x10c0 )
PANA_MEGA3_BANK 4480 ( 0x1180 )
PANA_MEGA4_BANK 4512 ( 0x11a0 )
PANA_MEGA5_BANK 4544 ( 0x11c0 )
PANA_MEGA6_BANK 4736 ( 0x1280 )
PANA_MEGA7_BANK 4800 ( 0x12c0 )
PBR_BIOS_PARAMETER_BLOCK 11 ( 0xb )
PBR_BOOTSTRAP_CODE 62 ( 0x3e )
PBR_BYTES_PER_SECTOR 11 ( 0xb )
PBR_EXTEND_BIOS_PARAMETER_BLOCK 28 ( 0x1c )
PBR_JUMP_INSTRUCTION 0 ( 0x0 )
PBR_MEDIA_TYPE 21 ( 0x15 )
PBR_NUMBER_OF_HEADS 26 ( 0x1a )
PBR_NUM_OF_FAT 16 ( 0x10 )
PBR_OEM_NAME 3 ( 0x3 )
PBR_RESERVED_SECTORS 14 ( 0xe )
PBR_ROOT_ENTRIES 17 ( 0x11 )
PBR_SECTORS_PER_CLUSTER 13 ( 0xd )
PBR_SECTORS_PER_FAT 22 ( 0x16 )
PBR_SECTORS_PER_TRACK 24 ( 0x18 )
PBR_SIGNATURE 510 ( 0x1fe )
PBR_SMALL_SECTOR 19 ( 0x13 )
PRIMARY_SLOT_REGISTER 168 ( 0xa8 )
PUTC 62533 ( 0xf445 )
PUTHEX 62546 ( 0xf452 )
PUTHEX:PUT09 62563 ( 0xf463 )
PUTHEX:PUTHEX1COL 62555 ( 0xf45b )
PUTS 62537 ( 0xf449 )
READ_FIRST_SECTOR 61980 ( 0xf21c )
READ_FIRST_SECTOR:BIOS_IMAGE_SIGNATURE_REFERENCE 62013 ( 0xf23d )
READ_FIRST_SECTOR:CHECK_SIGNATURE_LOOP 61999 ( 0xf22f )
READ_FIRST_SECTOR:MATCH 62007 ( 0xf237 )
READ_FIRST_SECTOR:NO_MATCH 62010 ( 0xf23a )
READ_SECTOR 62017 ( 0xf241 )
READ_SECTOR_CBR 62018 ( 0xf242 )
READ_SECTOR_FROM_EPCS 61601 ( 0xf0a1 )
READ_SECTOR_FROM_EPCS:READ_ALL 61623 ( 0xf0b7 )
READ_SECTOR_FROM_EPCS:READ_HALF_SECTOR 61623 ( 0xf0b7 )
REMAIN_FAT_SECTORS 63672 ( 0xf8b8 )
RESERVED002_BANK 132 ( 0x84 )
RESERVED003_BANK 134 ( 0x86 )
RESERVED010_BANK 136 ( 0x88 )
RESERVED011_BANK 138 ( 0x8a )
RESERVED012_BANK 140 ( 0x8c )
RESERVED013_BANK 142 ( 0x8e )
RESERVED020_BANK 144 ( 0x90 )
RESERVED022_BANK 148 ( 0x94 )
RESERVED023_BANK 150 ( 0x96 )
RESERVED030_BANK 152 ( 0x98 )
RESERVED032_BANK 156 ( 0x9c )
RESERVED033_BANK 158 ( 0x9e )
RESERVED311_BANK 162 ( 0xa2 )
RESERVED312_BANK 164 ( 0xa4 )
RESERVED313_BANK 166 ( 0xa6 )
ROM_CODE_ADDRESS 18 ( 0x12 )
ROOT_ENTRIES 63674 ( 0xf8ba )
SDACMD_APP_SEND_OP_COND 41 ( 0x29 )
SDACMD_SET_WR_BLOCK_ERASE_COUNT 23 ( 0x17 )
SDCMD_APP_CMD 55 ( 0x37 )
SDCMD_CLR_WRITE_PROT 29 ( 0x1d )
SDCMD_CRC_ON_OFF 39 ( 0x27 )
SDCMD_ERASE 38 ( 0x26 )
SDCMD_GO_IDLE_STATE 0 ( 0x0 )
SDCMD_LOCK_UNLOCK 42 ( 0x2a )
SDCMD_PROGRAM_CSD 27 ( 0x1b )
SDCMD_READ_OCR 58 ( 0x3a )
SDCMD_READ_SINGLE_BLK 17 ( 0x11 )
SDCMD_SEND_BKICKLEN 16 ( 0x10 )
SDCMD_SEND_CID 10 ( 0xa )
SDCMD_SEND_CSD 9 ( 0x9 )
SDCMD_SEND_IF_COND 8 ( 0x8 )
SDCMD_SEND_IO_COND 1 ( 0x1 )
SDCMD_SEND_STATUS 13 ( 0xd )
SDCMD_SEND_WRITE_PROT 30 ( 0x1e )
SDCMD_SET_WRITE_PROT 28 ( 0x1c )
SDCMD_TAG_ERASE_G_END 36 ( 0x24 )
SDCMD_TAG_ERASE_G_SEL 35 ( 0x23 )
SDCMD_TAG_SECT_END 33 ( 0x21 )
SDCMD_TAG_SECT_START 32 ( 0x20 )
SDCMD_UNTAG_ERASE_GRP 37 ( 0x25 )
SDCMD_UNTAG_SECTOR 34 ( 0x22 )
SDCMD_WRITE_BLOCK 24 ( 0x18 )
SD_INITIALIZE 62317 ( 0xf36d )
SD_INITIALIZE:DETECT_MMC 62413 ( 0xf3cd )
SD_INITIALIZE:NOT_SDHC 62411 ( 0xf3cb )
SD_INITIALIZE:REPEAT_APP_CMD 62374 ( 0xf3a6 )
SD_INITIALIZE:SD_INITIALIZE_SUB 62328 ( 0xf378 )
SD_INITIALIZE:SKIP2 62443 ( 0xf3eb )
SD_INITIALIZE:WAIT_CS 62333 ( 0xf37d )
SD_PREINITIALIZE 62308 ( 0xf364 )
SD_READ_SECTOR 62462 ( 0xf3fe )
SD_READ_SECTOR:READ_WAIT 62490 ( 0xf41a )
SD_READ_SECTOR:RETRY_INIT 62455 ( 0xf3f7 )
SD_READ_SECTOR:SKIP 62508 ( 0xf42c )
SEARCH_ACTIVE_PARTITION_ON_MBR 62511 ( 0xf42f )
SEARCH_ACTIVE_PARTITION_ON_MBR:TEST_PARTITION_LOOP 62516 ( 0xf434 )
SEARCH_BIOS_NAME 62075 ( 0xf27b )
SEARCH_BIOS_NAME:BIOS_NAME 62181 ( 0xf2e5 )
SEARCH_BIOS_NAME:ENTRIES_TO_SECTORS 62089 ( 0xf289 )
SEARCH_BIOS_NAME:GET_NEXT_SECTOR 62112 ( 0xf2a0 )
SEARCH_BIOS_NAME:NO_MATCH 62148 ( 0xf2c4 )
SEARCH_BIOS_NAME:SEARCH_LOOP 62133 ( 0xf2b5 )
SEARCH_BIOS_NAME:SKIP_INC 62100 ( 0xf294 )
SEARCH_BIOS_NAME:STRCMP 62140 ( 0xf2bc )
SET_CMD2 62273 ( 0xf341 )
SET_CMD8 62284 ( 0xf34c )
SET_MSX2_PALETTE 62817 ( 0xf561 )
SET_SD_COMMAND 62246 ( 0xf326 )
SET_SD_COMMAND:SET_COMMON 62297 ( 0xf359 )
SET_SD_COMMAND:SET_SDHC 62258 ( 0xf332 )
SET_SD_COMMAND:SET_SD_MMC 62267 ( 0xf33b )
SET_SD_COMMAND:SET_SRC95 62280 ( 0xf348 )
SET_SD_COMMAND:WAIT_COMMAND_ACCEPT 62300 ( 0xf35c )
SKIP_CHECK 61498 ( 0xf03a )
START_OF_CODE 61440 ( 0xf000 )
START_SYSTEM 61907 ( 0xf1d3 )
SUB_ROM_BANK 160 ( 0xa0 )
VDP_CONTROL_REGS 62836 ( 0xf574 )
VDP_CONTROL_REGS_END 62848 ( 0xf580 )
VDP_FILL_VRAM 62797 ( 0xf54d )
VDP_FILL_VRAM:LOOP1 62804 ( 0xf554 )
VDP_FILL_VRAM:LOOP2 62809 ( 0xf559 )
VDP_FILL_VRAM:LOOP3 62811 ( 0xf55b )
VDP_FILL_VRAM:SKIP1 62808 ( 0xf558 )
VDP_INITIALIZE 62742 ( 0xf516 )
VDP_MSX1_PALETTE_REGS 62848 ( 0xf580 )
VDP_MSX1_PALETTE_REGS_END 62880 ( 0xf5a0 )
VDP_MSX2_PALETTE_REGS 62880 ( 0xf5a0 )
VDP_MSX2_PALETTE_REGS_END 62904 ( 0xf5b8 )
VDP_PORT0 152 ( 0x98 )
VDP_PORT1 153 ( 0x99 )
VDP_PORT2 154 ( 0x9a )
VDP_PORT3 155 ( 0x9b )
VDP_SET_VRAM_ADDRESS 62787 ( 0xf543 )
VRAM_BANK 8064 ( 0x1f80 )
